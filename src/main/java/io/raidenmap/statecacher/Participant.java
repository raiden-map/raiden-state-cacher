/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.statecacher;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Participant extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8389285754104181351L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Participant\",\"namespace\":\"io.raidenmap.statecacher\",\"fields\":[{\"name\":\"ethAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deposit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"withdrawnAmount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"wantsToClose\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Participant> ENCODER =
      new BinaryMessageEncoder<Participant>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Participant> DECODER =
      new BinaryMessageDecoder<Participant>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Participant> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Participant> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Participant>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Participant to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Participant from a ByteBuffer. */
  public static Participant fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String ethAddress;
  @Deprecated public java.lang.String deposit;
  @Deprecated public java.lang.String withdrawnAmount;
  @Deprecated public boolean wantsToClose;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Participant() {}

  /**
   * All-args constructor.
   * @param ethAddress The new value for ethAddress
   * @param deposit The new value for deposit
   * @param withdrawnAmount The new value for withdrawnAmount
   * @param wantsToClose The new value for wantsToClose
   */
  public Participant(java.lang.String ethAddress, java.lang.String deposit, java.lang.String withdrawnAmount, java.lang.Boolean wantsToClose) {
    this.ethAddress = ethAddress;
    this.deposit = deposit;
    this.withdrawnAmount = withdrawnAmount;
    this.wantsToClose = wantsToClose;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ethAddress;
    case 1: return deposit;
    case 2: return withdrawnAmount;
    case 3: return wantsToClose;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ethAddress = (java.lang.String)value$; break;
    case 1: deposit = (java.lang.String)value$; break;
    case 2: withdrawnAmount = (java.lang.String)value$; break;
    case 3: wantsToClose = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ethAddress' field.
   * @return The value of the 'ethAddress' field.
   */
  public java.lang.String getEthAddress() {
    return ethAddress;
  }

  /**
   * Sets the value of the 'ethAddress' field.
   * @param value the value to set.
   */
  public void setEthAddress(java.lang.String value) {
    this.ethAddress = value;
  }

  /**
   * Gets the value of the 'deposit' field.
   * @return The value of the 'deposit' field.
   */
  public java.lang.String getDeposit() {
    return deposit;
  }

  /**
   * Sets the value of the 'deposit' field.
   * @param value the value to set.
   */
  public void setDeposit(java.lang.String value) {
    this.deposit = value;
  }

  /**
   * Gets the value of the 'withdrawnAmount' field.
   * @return The value of the 'withdrawnAmount' field.
   */
  public java.lang.String getWithdrawnAmount() {
    return withdrawnAmount;
  }

  /**
   * Sets the value of the 'withdrawnAmount' field.
   * @param value the value to set.
   */
  public void setWithdrawnAmount(java.lang.String value) {
    this.withdrawnAmount = value;
  }

  /**
   * Gets the value of the 'wantsToClose' field.
   * @return The value of the 'wantsToClose' field.
   */
  public java.lang.Boolean getWantsToClose() {
    return wantsToClose;
  }

  /**
   * Sets the value of the 'wantsToClose' field.
   * @param value the value to set.
   */
  public void setWantsToClose(java.lang.Boolean value) {
    this.wantsToClose = value;
  }

  /**
   * Creates a new Participant RecordBuilder.
   * @return A new Participant RecordBuilder
   */
  public static io.raidenmap.statecacher.Participant.Builder newBuilder() {
    return new io.raidenmap.statecacher.Participant.Builder();
  }

  /**
   * Creates a new Participant RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Participant RecordBuilder
   */
  public static io.raidenmap.statecacher.Participant.Builder newBuilder(io.raidenmap.statecacher.Participant.Builder other) {
    return new io.raidenmap.statecacher.Participant.Builder(other);
  }

  /**
   * Creates a new Participant RecordBuilder by copying an existing Participant instance.
   * @param other The existing instance to copy.
   * @return A new Participant RecordBuilder
   */
  public static io.raidenmap.statecacher.Participant.Builder newBuilder(io.raidenmap.statecacher.Participant other) {
    return new io.raidenmap.statecacher.Participant.Builder(other);
  }

  /**
   * RecordBuilder for Participant instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Participant>
    implements org.apache.avro.data.RecordBuilder<Participant> {

    private java.lang.String ethAddress;
    private java.lang.String deposit;
    private java.lang.String withdrawnAmount;
    private boolean wantsToClose;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.statecacher.Participant.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ethAddress)) {
        this.ethAddress = data().deepCopy(fields()[0].schema(), other.ethAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deposit)) {
        this.deposit = data().deepCopy(fields()[1].schema(), other.deposit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.withdrawnAmount)) {
        this.withdrawnAmount = data().deepCopy(fields()[2].schema(), other.withdrawnAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wantsToClose)) {
        this.wantsToClose = data().deepCopy(fields()[3].schema(), other.wantsToClose);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Participant instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.statecacher.Participant other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ethAddress)) {
        this.ethAddress = data().deepCopy(fields()[0].schema(), other.ethAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deposit)) {
        this.deposit = data().deepCopy(fields()[1].schema(), other.deposit);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.withdrawnAmount)) {
        this.withdrawnAmount = data().deepCopy(fields()[2].schema(), other.withdrawnAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wantsToClose)) {
        this.wantsToClose = data().deepCopy(fields()[3].schema(), other.wantsToClose);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'ethAddress' field.
      * @return The value.
      */
    public java.lang.String getEthAddress() {
      return ethAddress;
    }

    /**
      * Sets the value of the 'ethAddress' field.
      * @param value The value of 'ethAddress'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder setEthAddress(java.lang.String value) {
      validate(fields()[0], value);
      this.ethAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ethAddress' field has been set.
      * @return True if the 'ethAddress' field has been set, false otherwise.
      */
    public boolean hasEthAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ethAddress' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder clearEthAddress() {
      ethAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'deposit' field.
      * @return The value.
      */
    public java.lang.String getDeposit() {
      return deposit;
    }

    /**
      * Sets the value of the 'deposit' field.
      * @param value The value of 'deposit'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder setDeposit(java.lang.String value) {
      validate(fields()[1], value);
      this.deposit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'deposit' field has been set.
      * @return True if the 'deposit' field has been set, false otherwise.
      */
    public boolean hasDeposit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'deposit' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder clearDeposit() {
      deposit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'withdrawnAmount' field.
      * @return The value.
      */
    public java.lang.String getWithdrawnAmount() {
      return withdrawnAmount;
    }

    /**
      * Sets the value of the 'withdrawnAmount' field.
      * @param value The value of 'withdrawnAmount'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder setWithdrawnAmount(java.lang.String value) {
      validate(fields()[2], value);
      this.withdrawnAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'withdrawnAmount' field has been set.
      * @return True if the 'withdrawnAmount' field has been set, false otherwise.
      */
    public boolean hasWithdrawnAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'withdrawnAmount' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder clearWithdrawnAmount() {
      withdrawnAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'wantsToClose' field.
      * @return The value.
      */
    public java.lang.Boolean getWantsToClose() {
      return wantsToClose;
    }

    /**
      * Sets the value of the 'wantsToClose' field.
      * @param value The value of 'wantsToClose'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder setWantsToClose(boolean value) {
      validate(fields()[3], value);
      this.wantsToClose = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'wantsToClose' field has been set.
      * @return True if the 'wantsToClose' field has been set, false otherwise.
      */
    public boolean hasWantsToClose() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'wantsToClose' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Participant.Builder clearWantsToClose() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Participant build() {
      try {
        Participant record = new Participant();
        record.ethAddress = fieldSetFlags()[0] ? this.ethAddress : (java.lang.String) defaultValue(fields()[0]);
        record.deposit = fieldSetFlags()[1] ? this.deposit : (java.lang.String) defaultValue(fields()[1]);
        record.withdrawnAmount = fieldSetFlags()[2] ? this.withdrawnAmount : (java.lang.String) defaultValue(fields()[2]);
        record.wantsToClose = fieldSetFlags()[3] ? this.wantsToClose : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Participant>
    WRITER$ = (org.apache.avro.io.DatumWriter<Participant>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Participant>
    READER$ = (org.apache.avro.io.DatumReader<Participant>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
