/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.statecacher;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TokenNetworkDelta extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5535592841787833735L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenNetworkDelta\",\"namespace\":\"io.raidenmap.statecacher\",\"fields\":[{\"name\":\"token\",\"type\":{\"type\":\"record\",\"name\":\"Token\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tag\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"valueUsd\",\"type\":\"double\"},{\"name\":\"valueEth\",\"type\":\"double\"},{\"name\":\"valueBtc\",\"type\":\"double\"},{\"name\":\"priceChangeDayUsd\",\"type\":\"float\"},{\"name\":\"priceChangeWeekUsd\",\"type\":\"float\"},{\"name\":\"priceChangeDayEth\",\"type\":\"float\"},{\"name\":\"priceChangeWeekEth\",\"type\":\"float\"},{\"name\":\"priceChangeDayBtc\",\"type\":\"float\"},{\"name\":\"priceChangeWeekBtc\",\"type\":\"float\"},{\"name\":\"marketCap\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}},{\"name\":\"channels\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Channel\",\"fields\":[{\"name\":\"channelId\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"lastStateChangeBlock\",\"type\":\"long\"},{\"name\":\"settleTimeout\",\"type\":\"long\"},{\"name\":\"firstParticipant\",\"type\":{\"type\":\"record\",\"name\":\"Participant\",\"fields\":[{\"name\":\"ethAddress\",\"type\":\"string\"},{\"name\":\"deposit\",\"type\":\"long\"},{\"name\":\"withdrawnAmount\",\"type\":\"long\"},{\"name\":\"wantsToClose\",\"type\":\"boolean\"}]}},{\"name\":\"secondParticipant\",\"type\":\"Participant\"}]}}},{\"name\":\"tokenNetworkAddress\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"channelsCount\",\"type\":\"int\"},{\"name\":\"openChannels\",\"type\":\"int\"},{\"name\":\"closedChannels\",\"type\":\"int\"},{\"name\":\"settledChannels\",\"type\":\"int\"},{\"name\":\"avgChannelDeposit\",\"type\":\"int\"},{\"name\":\"totalDeposit\",\"type\":\"long\"},{\"name\":\"users\",\"type\":\"int\"},{\"name\":\"blockNumber\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenNetworkDelta> ENCODER =
      new BinaryMessageEncoder<TokenNetworkDelta>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenNetworkDelta> DECODER =
      new BinaryMessageDecoder<TokenNetworkDelta>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TokenNetworkDelta> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TokenNetworkDelta> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenNetworkDelta>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TokenNetworkDelta to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TokenNetworkDelta from a ByteBuffer. */
  public static TokenNetworkDelta fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.raidenmap.statecacher.Token token;
  @Deprecated public java.util.List<io.raidenmap.statecacher.Channel> channels;
  @Deprecated public java.lang.CharSequence tokenNetworkAddress;
  @Deprecated public long timestamp;
  @Deprecated public int channelsCount;
  @Deprecated public int openChannels;
  @Deprecated public int closedChannels;
  @Deprecated public int settledChannels;
  @Deprecated public int avgChannelDeposit;
  @Deprecated public long totalDeposit;
  @Deprecated public int users;
  @Deprecated public long blockNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenNetworkDelta() {}

  /**
   * All-args constructor.
   * @param token The new value for token
   * @param channels The new value for channels
   * @param tokenNetworkAddress The new value for tokenNetworkAddress
   * @param timestamp The new value for timestamp
   * @param channelsCount The new value for channelsCount
   * @param openChannels The new value for openChannels
   * @param closedChannels The new value for closedChannels
   * @param settledChannels The new value for settledChannels
   * @param avgChannelDeposit The new value for avgChannelDeposit
   * @param totalDeposit The new value for totalDeposit
   * @param users The new value for users
   * @param blockNumber The new value for blockNumber
   */
  public TokenNetworkDelta(io.raidenmap.statecacher.Token token, java.util.List<io.raidenmap.statecacher.Channel> channels, java.lang.CharSequence tokenNetworkAddress, java.lang.Long timestamp, java.lang.Integer channelsCount, java.lang.Integer openChannels, java.lang.Integer closedChannels, java.lang.Integer settledChannels, java.lang.Integer avgChannelDeposit, java.lang.Long totalDeposit, java.lang.Integer users, java.lang.Long blockNumber) {
    this.token = token;
    this.channels = channels;
    this.tokenNetworkAddress = tokenNetworkAddress;
    this.timestamp = timestamp;
    this.channelsCount = channelsCount;
    this.openChannels = openChannels;
    this.closedChannels = closedChannels;
    this.settledChannels = settledChannels;
    this.avgChannelDeposit = avgChannelDeposit;
    this.totalDeposit = totalDeposit;
    this.users = users;
    this.blockNumber = blockNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return token;
    case 1: return channels;
    case 2: return tokenNetworkAddress;
    case 3: return timestamp;
    case 4: return channelsCount;
    case 5: return openChannels;
    case 6: return closedChannels;
    case 7: return settledChannels;
    case 8: return avgChannelDeposit;
    case 9: return totalDeposit;
    case 10: return users;
    case 11: return blockNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: token = (io.raidenmap.statecacher.Token)value$; break;
    case 1: channels = (java.util.List<io.raidenmap.statecacher.Channel>)value$; break;
    case 2: tokenNetworkAddress = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: channelsCount = (java.lang.Integer)value$; break;
    case 5: openChannels = (java.lang.Integer)value$; break;
    case 6: closedChannels = (java.lang.Integer)value$; break;
    case 7: settledChannels = (java.lang.Integer)value$; break;
    case 8: avgChannelDeposit = (java.lang.Integer)value$; break;
    case 9: totalDeposit = (java.lang.Long)value$; break;
    case 10: users = (java.lang.Integer)value$; break;
    case 11: blockNumber = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public io.raidenmap.statecacher.Token getToken() {
    return token;
  }

  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(io.raidenmap.statecacher.Token value) {
    this.token = value;
  }

  /**
   * Gets the value of the 'channels' field.
   * @return The value of the 'channels' field.
   */
  public java.util.List<io.raidenmap.statecacher.Channel> getChannels() {
    return channels;
  }

  /**
   * Sets the value of the 'channels' field.
   * @param value the value to set.
   */
  public void setChannels(java.util.List<io.raidenmap.statecacher.Channel> value) {
    this.channels = value;
  }

  /**
   * Gets the value of the 'tokenNetworkAddress' field.
   * @return The value of the 'tokenNetworkAddress' field.
   */
  public java.lang.CharSequence getTokenNetworkAddress() {
    return tokenNetworkAddress;
  }

  /**
   * Sets the value of the 'tokenNetworkAddress' field.
   * @param value the value to set.
   */
  public void setTokenNetworkAddress(java.lang.CharSequence value) {
    this.tokenNetworkAddress = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'channelsCount' field.
   * @return The value of the 'channelsCount' field.
   */
  public java.lang.Integer getChannelsCount() {
    return channelsCount;
  }

  /**
   * Sets the value of the 'channelsCount' field.
   * @param value the value to set.
   */
  public void setChannelsCount(java.lang.Integer value) {
    this.channelsCount = value;
  }

  /**
   * Gets the value of the 'openChannels' field.
   * @return The value of the 'openChannels' field.
   */
  public java.lang.Integer getOpenChannels() {
    return openChannels;
  }

  /**
   * Sets the value of the 'openChannels' field.
   * @param value the value to set.
   */
  public void setOpenChannels(java.lang.Integer value) {
    this.openChannels = value;
  }

  /**
   * Gets the value of the 'closedChannels' field.
   * @return The value of the 'closedChannels' field.
   */
  public java.lang.Integer getClosedChannels() {
    return closedChannels;
  }

  /**
   * Sets the value of the 'closedChannels' field.
   * @param value the value to set.
   */
  public void setClosedChannels(java.lang.Integer value) {
    this.closedChannels = value;
  }

  /**
   * Gets the value of the 'settledChannels' field.
   * @return The value of the 'settledChannels' field.
   */
  public java.lang.Integer getSettledChannels() {
    return settledChannels;
  }

  /**
   * Sets the value of the 'settledChannels' field.
   * @param value the value to set.
   */
  public void setSettledChannels(java.lang.Integer value) {
    this.settledChannels = value;
  }

  /**
   * Gets the value of the 'avgChannelDeposit' field.
   * @return The value of the 'avgChannelDeposit' field.
   */
  public java.lang.Integer getAvgChannelDeposit() {
    return avgChannelDeposit;
  }

  /**
   * Sets the value of the 'avgChannelDeposit' field.
   * @param value the value to set.
   */
  public void setAvgChannelDeposit(java.lang.Integer value) {
    this.avgChannelDeposit = value;
  }

  /**
   * Gets the value of the 'totalDeposit' field.
   * @return The value of the 'totalDeposit' field.
   */
  public java.lang.Long getTotalDeposit() {
    return totalDeposit;
  }

  /**
   * Sets the value of the 'totalDeposit' field.
   * @param value the value to set.
   */
  public void setTotalDeposit(java.lang.Long value) {
    this.totalDeposit = value;
  }

  /**
   * Gets the value of the 'users' field.
   * @return The value of the 'users' field.
   */
  public java.lang.Integer getUsers() {
    return users;
  }

  /**
   * Sets the value of the 'users' field.
   * @param value the value to set.
   */
  public void setUsers(java.lang.Integer value) {
    this.users = value;
  }

  /**
   * Gets the value of the 'blockNumber' field.
   * @return The value of the 'blockNumber' field.
   */
  public java.lang.Long getBlockNumber() {
    return blockNumber;
  }

  /**
   * Sets the value of the 'blockNumber' field.
   * @param value the value to set.
   */
  public void setBlockNumber(java.lang.Long value) {
    this.blockNumber = value;
  }

  /**
   * Creates a new TokenNetworkDelta RecordBuilder.
   * @return A new TokenNetworkDelta RecordBuilder
   */
  public static io.raidenmap.statecacher.TokenNetworkDelta.Builder newBuilder() {
    return new io.raidenmap.statecacher.TokenNetworkDelta.Builder();
  }

  /**
   * Creates a new TokenNetworkDelta RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenNetworkDelta RecordBuilder
   */
  public static io.raidenmap.statecacher.TokenNetworkDelta.Builder newBuilder(io.raidenmap.statecacher.TokenNetworkDelta.Builder other) {
    return new io.raidenmap.statecacher.TokenNetworkDelta.Builder(other);
  }

  /**
   * Creates a new TokenNetworkDelta RecordBuilder by copying an existing TokenNetworkDelta instance.
   * @param other The existing instance to copy.
   * @return A new TokenNetworkDelta RecordBuilder
   */
  public static io.raidenmap.statecacher.TokenNetworkDelta.Builder newBuilder(io.raidenmap.statecacher.TokenNetworkDelta other) {
    return new io.raidenmap.statecacher.TokenNetworkDelta.Builder(other);
  }

  /**
   * RecordBuilder for TokenNetworkDelta instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenNetworkDelta>
    implements org.apache.avro.data.RecordBuilder<TokenNetworkDelta> {

    private io.raidenmap.statecacher.Token token;
    private io.raidenmap.statecacher.Token.Builder tokenBuilder;
    private java.util.List<io.raidenmap.statecacher.Channel> channels;
    private java.lang.CharSequence tokenNetworkAddress;
    private long timestamp;
    private int channelsCount;
    private int openChannels;
    private int closedChannels;
    private int settledChannels;
    private int avgChannelDeposit;
    private long totalDeposit;
    private int users;
    private long blockNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.statecacher.TokenNetworkDelta.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.token)) {
        this.token = data().deepCopy(fields()[0].schema(), other.token);
        fieldSetFlags()[0] = true;
      }
      if (other.hasTokenBuilder()) {
        this.tokenBuilder = io.raidenmap.statecacher.Token.newBuilder(other.getTokenBuilder());
      }
      if (isValidValue(fields()[1], other.channels)) {
        this.channels = data().deepCopy(fields()[1].schema(), other.channels);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tokenNetworkAddress)) {
        this.tokenNetworkAddress = data().deepCopy(fields()[2].schema(), other.tokenNetworkAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.channelsCount)) {
        this.channelsCount = data().deepCopy(fields()[4].schema(), other.channelsCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openChannels)) {
        this.openChannels = data().deepCopy(fields()[5].schema(), other.openChannels);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.closedChannels)) {
        this.closedChannels = data().deepCopy(fields()[6].schema(), other.closedChannels);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.settledChannels)) {
        this.settledChannels = data().deepCopy(fields()[7].schema(), other.settledChannels);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.avgChannelDeposit)) {
        this.avgChannelDeposit = data().deepCopy(fields()[8].schema(), other.avgChannelDeposit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalDeposit)) {
        this.totalDeposit = data().deepCopy(fields()[9].schema(), other.totalDeposit);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.users)) {
        this.users = data().deepCopy(fields()[10].schema(), other.users);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[11].schema(), other.blockNumber);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TokenNetworkDelta instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.statecacher.TokenNetworkDelta other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.token)) {
        this.token = data().deepCopy(fields()[0].schema(), other.token);
        fieldSetFlags()[0] = true;
      }
      this.tokenBuilder = null;
      if (isValidValue(fields()[1], other.channels)) {
        this.channels = data().deepCopy(fields()[1].schema(), other.channels);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tokenNetworkAddress)) {
        this.tokenNetworkAddress = data().deepCopy(fields()[2].schema(), other.tokenNetworkAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.channelsCount)) {
        this.channelsCount = data().deepCopy(fields()[4].schema(), other.channelsCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.openChannels)) {
        this.openChannels = data().deepCopy(fields()[5].schema(), other.openChannels);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.closedChannels)) {
        this.closedChannels = data().deepCopy(fields()[6].schema(), other.closedChannels);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.settledChannels)) {
        this.settledChannels = data().deepCopy(fields()[7].schema(), other.settledChannels);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.avgChannelDeposit)) {
        this.avgChannelDeposit = data().deepCopy(fields()[8].schema(), other.avgChannelDeposit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalDeposit)) {
        this.totalDeposit = data().deepCopy(fields()[9].schema(), other.totalDeposit);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.users)) {
        this.users = data().deepCopy(fields()[10].schema(), other.users);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[11].schema(), other.blockNumber);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public io.raidenmap.statecacher.Token getToken() {
      return token;
    }

    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setToken(io.raidenmap.statecacher.Token value) {
      validate(fields()[0], value);
      this.tokenBuilder = null;
      this.token = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'token' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.raidenmap.statecacher.Token.Builder getTokenBuilder() {
      if (tokenBuilder == null) {
        if (hasToken()) {
          setTokenBuilder(io.raidenmap.statecacher.Token.newBuilder(token));
        } else {
          setTokenBuilder(io.raidenmap.statecacher.Token.newBuilder());
        }
      }
      return tokenBuilder;
    }

    /**
     * Sets the Builder instance for the 'token' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setTokenBuilder(io.raidenmap.statecacher.Token.Builder value) {
      clearToken();
      tokenBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'token' field has an active Builder instance
     * @return True if the 'token' field has an active Builder instance
     */
    public boolean hasTokenBuilder() {
      return tokenBuilder != null;
    }

    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearToken() {
      token = null;
      tokenBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * @return The value.
      */
    public java.util.List<io.raidenmap.statecacher.Channel> getChannels() {
      return channels;
    }

    /**
      * Sets the value of the 'channels' field.
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setChannels(java.util.List<io.raidenmap.statecacher.Channel> value) {
      validate(fields()[1], value);
      this.channels = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'channels' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenNetworkAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getTokenNetworkAddress() {
      return tokenNetworkAddress;
    }

    /**
      * Sets the value of the 'tokenNetworkAddress' field.
      * @param value The value of 'tokenNetworkAddress'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setTokenNetworkAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tokenNetworkAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenNetworkAddress' field has been set.
      * @return True if the 'tokenNetworkAddress' field has been set, false otherwise.
      */
    public boolean hasTokenNetworkAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tokenNetworkAddress' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearTokenNetworkAddress() {
      tokenNetworkAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'channelsCount' field.
      * @return The value.
      */
    public java.lang.Integer getChannelsCount() {
      return channelsCount;
    }

    /**
      * Sets the value of the 'channelsCount' field.
      * @param value The value of 'channelsCount'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setChannelsCount(int value) {
      validate(fields()[4], value);
      this.channelsCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'channelsCount' field has been set.
      * @return True if the 'channelsCount' field has been set, false otherwise.
      */
    public boolean hasChannelsCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'channelsCount' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearChannelsCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'openChannels' field.
      * @return The value.
      */
    public java.lang.Integer getOpenChannels() {
      return openChannels;
    }

    /**
      * Sets the value of the 'openChannels' field.
      * @param value The value of 'openChannels'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setOpenChannels(int value) {
      validate(fields()[5], value);
      this.openChannels = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'openChannels' field has been set.
      * @return True if the 'openChannels' field has been set, false otherwise.
      */
    public boolean hasOpenChannels() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'openChannels' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearOpenChannels() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'closedChannels' field.
      * @return The value.
      */
    public java.lang.Integer getClosedChannels() {
      return closedChannels;
    }

    /**
      * Sets the value of the 'closedChannels' field.
      * @param value The value of 'closedChannels'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setClosedChannels(int value) {
      validate(fields()[6], value);
      this.closedChannels = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'closedChannels' field has been set.
      * @return True if the 'closedChannels' field has been set, false otherwise.
      */
    public boolean hasClosedChannels() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'closedChannels' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearClosedChannels() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'settledChannels' field.
      * @return The value.
      */
    public java.lang.Integer getSettledChannels() {
      return settledChannels;
    }

    /**
      * Sets the value of the 'settledChannels' field.
      * @param value The value of 'settledChannels'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setSettledChannels(int value) {
      validate(fields()[7], value);
      this.settledChannels = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'settledChannels' field has been set.
      * @return True if the 'settledChannels' field has been set, false otherwise.
      */
    public boolean hasSettledChannels() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'settledChannels' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearSettledChannels() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgChannelDeposit' field.
      * @return The value.
      */
    public java.lang.Integer getAvgChannelDeposit() {
      return avgChannelDeposit;
    }

    /**
      * Sets the value of the 'avgChannelDeposit' field.
      * @param value The value of 'avgChannelDeposit'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setAvgChannelDeposit(int value) {
      validate(fields()[8], value);
      this.avgChannelDeposit = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'avgChannelDeposit' field has been set.
      * @return True if the 'avgChannelDeposit' field has been set, false otherwise.
      */
    public boolean hasAvgChannelDeposit() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'avgChannelDeposit' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearAvgChannelDeposit() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDeposit' field.
      * @return The value.
      */
    public java.lang.Long getTotalDeposit() {
      return totalDeposit;
    }

    /**
      * Sets the value of the 'totalDeposit' field.
      * @param value The value of 'totalDeposit'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setTotalDeposit(long value) {
      validate(fields()[9], value);
      this.totalDeposit = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDeposit' field has been set.
      * @return True if the 'totalDeposit' field has been set, false otherwise.
      */
    public boolean hasTotalDeposit() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'totalDeposit' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearTotalDeposit() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'users' field.
      * @return The value.
      */
    public java.lang.Integer getUsers() {
      return users;
    }

    /**
      * Sets the value of the 'users' field.
      * @param value The value of 'users'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setUsers(int value) {
      validate(fields()[10], value);
      this.users = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'users' field has been set.
      * @return True if the 'users' field has been set, false otherwise.
      */
    public boolean hasUsers() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'users' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearUsers() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockNumber' field.
      * @return The value.
      */
    public java.lang.Long getBlockNumber() {
      return blockNumber;
    }

    /**
      * Sets the value of the 'blockNumber' field.
      * @param value The value of 'blockNumber'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder setBlockNumber(long value) {
      validate(fields()[11], value);
      this.blockNumber = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'blockNumber' field has been set.
      * @return True if the 'blockNumber' field has been set, false otherwise.
      */
    public boolean hasBlockNumber() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'blockNumber' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkDelta.Builder clearBlockNumber() {
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenNetworkDelta build() {
      try {
        TokenNetworkDelta record = new TokenNetworkDelta();
        if (tokenBuilder != null) {
          record.token = this.tokenBuilder.build();
        } else {
          record.token = fieldSetFlags()[0] ? this.token : (io.raidenmap.statecacher.Token) defaultValue(fields()[0]);
        }
        record.channels = fieldSetFlags()[1] ? this.channels : (java.util.List<io.raidenmap.statecacher.Channel>) defaultValue(fields()[1]);
        record.tokenNetworkAddress = fieldSetFlags()[2] ? this.tokenNetworkAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.channelsCount = fieldSetFlags()[4] ? this.channelsCount : (java.lang.Integer) defaultValue(fields()[4]);
        record.openChannels = fieldSetFlags()[5] ? this.openChannels : (java.lang.Integer) defaultValue(fields()[5]);
        record.closedChannels = fieldSetFlags()[6] ? this.closedChannels : (java.lang.Integer) defaultValue(fields()[6]);
        record.settledChannels = fieldSetFlags()[7] ? this.settledChannels : (java.lang.Integer) defaultValue(fields()[7]);
        record.avgChannelDeposit = fieldSetFlags()[8] ? this.avgChannelDeposit : (java.lang.Integer) defaultValue(fields()[8]);
        record.totalDeposit = fieldSetFlags()[9] ? this.totalDeposit : (java.lang.Long) defaultValue(fields()[9]);
        record.users = fieldSetFlags()[10] ? this.users : (java.lang.Integer) defaultValue(fields()[10]);
        record.blockNumber = fieldSetFlags()[11] ? this.blockNumber : (java.lang.Long) defaultValue(fields()[11]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenNetworkDelta>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenNetworkDelta>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenNetworkDelta>
    READER$ = (org.apache.avro.io.DatumReader<TokenNetworkDelta>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  public void updateClosedChannels() {
    setClosedChannels(getClosedChannels() + 1);
    setOpenChannels(getOpenChannels() - 1);
  }

  public void updateSettledChannels() {
    setSettledChannels(getSettledChannels() + 1);
  }
}
