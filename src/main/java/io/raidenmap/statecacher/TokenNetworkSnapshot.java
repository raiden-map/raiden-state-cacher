/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.statecacher;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TokenNetworkSnapshot extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2198268000684162560L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TokenNetworkSnapshot\",\"namespace\":\"io.raidenmap.statecacher\",\"fields\":[{\"name\":\"tokenNetworkAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tokenNetworkDeltas\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TokenNetworkDelta\",\"fields\":[{\"name\":\"token\",\"type\":{\"type\":\"record\",\"name\":\"Token\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"imageUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueUsd\",\"type\":\"double\"},{\"name\":\"valueEth\",\"type\":\"double\"},{\"name\":\"valueBtc\",\"type\":\"double\"},{\"name\":\"priceChangeDayUsd\",\"type\":\"float\"},{\"name\":\"priceChangeWeekUsd\",\"type\":\"float\"},{\"name\":\"priceChangeDayEth\",\"type\":\"float\"},{\"name\":\"priceChangeWeekEth\",\"type\":\"float\"},{\"name\":\"priceChangeDayBtc\",\"type\":\"float\"},{\"name\":\"priceChangeWeekBtc\",\"type\":\"float\"},{\"name\":\"marketCap\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}},{\"name\":\"modifiedChannels\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Channel\",\"fields\":[{\"name\":\"channelId\",\"type\":\"int\"},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastStateChangeBlock\",\"type\":\"long\"},{\"name\":\"settleTimeout\",\"type\":\"long\"},{\"name\":\"firstParticipant\",\"type\":{\"type\":\"record\",\"name\":\"Participant\",\"fields\":[{\"name\":\"ethAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"deposit\",\"type\":\"long\"},{\"name\":\"withdrawnAmount\",\"type\":\"long\"},{\"name\":\"wantsToClose\",\"type\":\"boolean\"}]}},{\"name\":\"secondParticipant\",\"type\":\"Participant\"}]},\"avro.java.string\":\"String\"}},{\"name\":\"tokenNetworkAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"channelsCount\",\"type\":\"int\"},{\"name\":\"openChannels\",\"type\":\"int\"},{\"name\":\"closedChannels\",\"type\":\"int\"},{\"name\":\"settledChannels\",\"type\":\"int\"},{\"name\":\"avgChannelDeposit\",\"type\":\"double\"},{\"name\":\"totalDeposit\",\"type\":\"long\"},{\"name\":\"users\",\"type\":\"int\"},{\"name\":\"blockNumber\",\"type\":\"long\"}]}}},{\"name\":\"creationBlockNumber\",\"type\":\"long\"},{\"name\":\"creationTimestamp\",\"type\":\"long\"},{\"name\":\"stateBlockNumber\",\"type\":\"long\"},{\"name\":\"stateTimestamp\",\"type\":\"long\"},{\"name\":\"token\",\"type\":\"Token\"},{\"name\":\"avgChannelDeposit\",\"type\":\"double\"},{\"name\":\"totalDeposit\",\"type\":\"long\"},{\"name\":\"users\",\"type\":\"int\"},{\"name\":\"blockNumber\",\"type\":\"long\"},{\"name\":\"channels\",\"type\":{\"type\":\"map\",\"values\":\"Channel\",\"avro.java.string\":\"String\"}},{\"name\":\"endpoints\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Endpoint\",\"namespace\":\"io.raidenmap\",\"fields\":[{\"name\":\"ethAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ipAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"latitude\",\"type\":\"float\"},{\"name\":\"longitude\",\"type\":\"float\"}]}}},{\"name\":\"twitter\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TokenNetworkSnapshot> ENCODER =
      new BinaryMessageEncoder<TokenNetworkSnapshot>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TokenNetworkSnapshot> DECODER =
      new BinaryMessageDecoder<TokenNetworkSnapshot>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TokenNetworkSnapshot> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TokenNetworkSnapshot> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TokenNetworkSnapshot>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TokenNetworkSnapshot to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TokenNetworkSnapshot from a ByteBuffer. */
  public static TokenNetworkSnapshot fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String tokenNetworkAddress;
  @Deprecated public java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> tokenNetworkDeltas;
  @Deprecated public long creationBlockNumber;
  @Deprecated public long creationTimestamp;
  @Deprecated public long stateBlockNumber;
  @Deprecated public long stateTimestamp;
  @Deprecated public io.raidenmap.statecacher.Token token;
  @Deprecated public double avgChannelDeposit;
  @Deprecated public long totalDeposit;
  @Deprecated public int users;
  @Deprecated public long blockNumber;
  @Deprecated public java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> channels;
  @Deprecated public java.util.List<io.raidenmap.Endpoint> endpoints;
  @Deprecated public java.lang.String twitter;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TokenNetworkSnapshot() {}

  /**
   * All-args constructor.
   * @param tokenNetworkAddress The new value for tokenNetworkAddress
   * @param tokenNetworkDeltas The new value for tokenNetworkDeltas
   * @param creationBlockNumber The new value for creationBlockNumber
   * @param creationTimestamp The new value for creationTimestamp
   * @param stateBlockNumber The new value for stateBlockNumber
   * @param stateTimestamp The new value for stateTimestamp
   * @param token The new value for token
   * @param avgChannelDeposit The new value for avgChannelDeposit
   * @param totalDeposit The new value for totalDeposit
   * @param users The new value for users
   * @param blockNumber The new value for blockNumber
   * @param channels The new value for channels
   * @param endpoints The new value for endpoints
   * @param twitter The new value for twitter
   */
  public TokenNetworkSnapshot(java.lang.String tokenNetworkAddress, java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> tokenNetworkDeltas, java.lang.Long creationBlockNumber, java.lang.Long creationTimestamp, java.lang.Long stateBlockNumber, java.lang.Long stateTimestamp, io.raidenmap.statecacher.Token token, java.lang.Double avgChannelDeposit, java.lang.Long totalDeposit, java.lang.Integer users, java.lang.Long blockNumber, java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> channels, java.util.List<io.raidenmap.Endpoint> endpoints, java.lang.String twitter) {
    this.tokenNetworkAddress = tokenNetworkAddress;
    this.tokenNetworkDeltas = tokenNetworkDeltas;
    this.creationBlockNumber = creationBlockNumber;
    this.creationTimestamp = creationTimestamp;
    this.stateBlockNumber = stateBlockNumber;
    this.stateTimestamp = stateTimestamp;
    this.token = token;
    this.avgChannelDeposit = avgChannelDeposit;
    this.totalDeposit = totalDeposit;
    this.users = users;
    this.blockNumber = blockNumber;
    this.channels = channels;
    this.endpoints = endpoints;
    this.twitter = twitter;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tokenNetworkAddress;
    case 1: return tokenNetworkDeltas;
    case 2: return creationBlockNumber;
    case 3: return creationTimestamp;
    case 4: return stateBlockNumber;
    case 5: return stateTimestamp;
    case 6: return token;
    case 7: return avgChannelDeposit;
    case 8: return totalDeposit;
    case 9: return users;
    case 10: return blockNumber;
    case 11: return channels;
    case 12: return endpoints;
    case 13: return twitter;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tokenNetworkAddress = (java.lang.String)value$; break;
    case 1: tokenNetworkDeltas = (java.util.List<io.raidenmap.statecacher.TokenNetworkDelta>)value$; break;
    case 2: creationBlockNumber = (java.lang.Long)value$; break;
    case 3: creationTimestamp = (java.lang.Long)value$; break;
    case 4: stateBlockNumber = (java.lang.Long)value$; break;
    case 5: stateTimestamp = (java.lang.Long)value$; break;
    case 6: token = (io.raidenmap.statecacher.Token)value$; break;
    case 7: avgChannelDeposit = (java.lang.Double)value$; break;
    case 8: totalDeposit = (java.lang.Long)value$; break;
    case 9: users = (java.lang.Integer)value$; break;
    case 10: blockNumber = (java.lang.Long)value$; break;
    case 11: channels = (java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel>)value$; break;
    case 12: endpoints = (java.util.List<io.raidenmap.Endpoint>)value$; break;
    case 13: twitter = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tokenNetworkAddress' field.
   * @return The value of the 'tokenNetworkAddress' field.
   */
  public java.lang.String getTokenNetworkAddress() {
    return tokenNetworkAddress;
  }

  /**
   * Sets the value of the 'tokenNetworkAddress' field.
   * @param value the value to set.
   */
  public void setTokenNetworkAddress(java.lang.String value) {
    this.tokenNetworkAddress = value;
  }

  /**
   * Gets the value of the 'tokenNetworkDeltas' field.
   * @return The value of the 'tokenNetworkDeltas' field.
   */
  public java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> getTokenNetworkDeltas() {
    return tokenNetworkDeltas;
  }

  /**
   * Sets the value of the 'tokenNetworkDeltas' field.
   * @param value the value to set.
   */
  public void setTokenNetworkDeltas(java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> value) {
    this.tokenNetworkDeltas = value;
  }

  /**
   * Gets the value of the 'creationBlockNumber' field.
   * @return The value of the 'creationBlockNumber' field.
   */
  public java.lang.Long getCreationBlockNumber() {
    return creationBlockNumber;
  }

  /**
   * Sets the value of the 'creationBlockNumber' field.
   * @param value the value to set.
   */
  public void setCreationBlockNumber(java.lang.Long value) {
    this.creationBlockNumber = value;
  }

  /**
   * Gets the value of the 'creationTimestamp' field.
   * @return The value of the 'creationTimestamp' field.
   */
  public java.lang.Long getCreationTimestamp() {
    return creationTimestamp;
  }

  /**
   * Sets the value of the 'creationTimestamp' field.
   * @param value the value to set.
   */
  public void setCreationTimestamp(java.lang.Long value) {
    this.creationTimestamp = value;
  }

  /**
   * Gets the value of the 'stateBlockNumber' field.
   * @return The value of the 'stateBlockNumber' field.
   */
  public java.lang.Long getStateBlockNumber() {
    return stateBlockNumber;
  }

  /**
   * Sets the value of the 'stateBlockNumber' field.
   * @param value the value to set.
   */
  public void setStateBlockNumber(java.lang.Long value) {
    this.stateBlockNumber = value;
  }

  /**
   * Gets the value of the 'stateTimestamp' field.
   * @return The value of the 'stateTimestamp' field.
   */
  public java.lang.Long getStateTimestamp() {
    return stateTimestamp;
  }

  /**
   * Sets the value of the 'stateTimestamp' field.
   * @param value the value to set.
   */
  public void setStateTimestamp(java.lang.Long value) {
    this.stateTimestamp = value;
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public io.raidenmap.statecacher.Token getToken() {
    return token;
  }

  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(io.raidenmap.statecacher.Token value) {
    this.token = value;
  }

  /**
   * Gets the value of the 'avgChannelDeposit' field.
   * @return The value of the 'avgChannelDeposit' field.
   */
  public java.lang.Double getAvgChannelDeposit() {
    return avgChannelDeposit;
  }

  /**
   * Sets the value of the 'avgChannelDeposit' field.
   * @param value the value to set.
   */
  public void setAvgChannelDeposit(java.lang.Double value) {
    this.avgChannelDeposit = value;
  }

  /**
   * Gets the value of the 'totalDeposit' field.
   * @return The value of the 'totalDeposit' field.
   */
  public java.lang.Long getTotalDeposit() {
    return totalDeposit;
  }

  /**
   * Sets the value of the 'totalDeposit' field.
   * @param value the value to set.
   */
  public void setTotalDeposit(java.lang.Long value) {
    this.totalDeposit = value;
  }

  /**
   * Gets the value of the 'users' field.
   * @return The value of the 'users' field.
   */
  public java.lang.Integer getUsers() {
    return users;
  }

  /**
   * Sets the value of the 'users' field.
   * @param value the value to set.
   */
  public void setUsers(java.lang.Integer value) {
    this.users = value;
  }

  /**
   * Gets the value of the 'blockNumber' field.
   * @return The value of the 'blockNumber' field.
   */
  public java.lang.Long getBlockNumber() {
    return blockNumber;
  }

  /**
   * Sets the value of the 'blockNumber' field.
   * @param value the value to set.
   */
  public void setBlockNumber(java.lang.Long value) {
    this.blockNumber = value;
  }

  /**
   * Gets the value of the 'channels' field.
   * @return The value of the 'channels' field.
   */
  public java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> getChannels() {
    return channels;
  }

  /**
   * Sets the value of the 'channels' field.
   * @param value the value to set.
   */
  public void setChannels(java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> value) {
    this.channels = value;
  }

  /**
   * Gets the value of the 'endpoints' field.
   * @return The value of the 'endpoints' field.
   */
  public java.util.List<io.raidenmap.Endpoint> getEndpoints() {
    return endpoints;
  }

  /**
   * Sets the value of the 'endpoints' field.
   * @param value the value to set.
   */
  public void setEndpoints(java.util.List<io.raidenmap.Endpoint> value) {
    this.endpoints = value;
  }

  /**
   * Gets the value of the 'twitter' field.
   * @return The value of the 'twitter' field.
   */
  public java.lang.String getTwitter() {
    return twitter;
  }

  /**
   * Sets the value of the 'twitter' field.
   * @param value the value to set.
   */
  public void setTwitter(java.lang.String value) {
    this.twitter = value;
  }

  /**
   * Creates a new TokenNetworkSnapshot RecordBuilder.
   * @return A new TokenNetworkSnapshot RecordBuilder
   */
  public static io.raidenmap.statecacher.TokenNetworkSnapshot.Builder newBuilder() {
    return new io.raidenmap.statecacher.TokenNetworkSnapshot.Builder();
  }

  /**
   * Creates a new TokenNetworkSnapshot RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TokenNetworkSnapshot RecordBuilder
   */
  public static io.raidenmap.statecacher.TokenNetworkSnapshot.Builder newBuilder(io.raidenmap.statecacher.TokenNetworkSnapshot.Builder other) {
    return new io.raidenmap.statecacher.TokenNetworkSnapshot.Builder(other);
  }

  /**
   * Creates a new TokenNetworkSnapshot RecordBuilder by copying an existing TokenNetworkSnapshot instance.
   * @param other The existing instance to copy.
   * @return A new TokenNetworkSnapshot RecordBuilder
   */
  public static io.raidenmap.statecacher.TokenNetworkSnapshot.Builder newBuilder(io.raidenmap.statecacher.TokenNetworkSnapshot other) {
    return new io.raidenmap.statecacher.TokenNetworkSnapshot.Builder(other);
  }

  /**
   * RecordBuilder for TokenNetworkSnapshot instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TokenNetworkSnapshot>
    implements org.apache.avro.data.RecordBuilder<TokenNetworkSnapshot> {

    private java.lang.String tokenNetworkAddress;
    private java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> tokenNetworkDeltas;
    private long creationBlockNumber;
    private long creationTimestamp;
    private long stateBlockNumber;
    private long stateTimestamp;
    private io.raidenmap.statecacher.Token token;
    private io.raidenmap.statecacher.Token.Builder tokenBuilder;
    private double avgChannelDeposit;
    private long totalDeposit;
    private int users;
    private long blockNumber;
    private java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> channels;
    private java.util.List<io.raidenmap.Endpoint> endpoints;
    private java.lang.String twitter;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.statecacher.TokenNetworkSnapshot.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tokenNetworkAddress)) {
        this.tokenNetworkAddress = data().deepCopy(fields()[0].schema(), other.tokenNetworkAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tokenNetworkDeltas)) {
        this.tokenNetworkDeltas = data().deepCopy(fields()[1].schema(), other.tokenNetworkDeltas);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationBlockNumber)) {
        this.creationBlockNumber = data().deepCopy(fields()[2].schema(), other.creationBlockNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[3].schema(), other.creationTimestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stateBlockNumber)) {
        this.stateBlockNumber = data().deepCopy(fields()[4].schema(), other.stateBlockNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stateTimestamp)) {
        this.stateTimestamp = data().deepCopy(fields()[5].schema(), other.stateTimestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.token)) {
        this.token = data().deepCopy(fields()[6].schema(), other.token);
        fieldSetFlags()[6] = true;
      }
      if (other.hasTokenBuilder()) {
        this.tokenBuilder = io.raidenmap.statecacher.Token.newBuilder(other.getTokenBuilder());
      }
      if (isValidValue(fields()[7], other.avgChannelDeposit)) {
        this.avgChannelDeposit = data().deepCopy(fields()[7].schema(), other.avgChannelDeposit);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalDeposit)) {
        this.totalDeposit = data().deepCopy(fields()[8].schema(), other.totalDeposit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.users)) {
        this.users = data().deepCopy(fields()[9].schema(), other.users);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[10].schema(), other.blockNumber);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.channels)) {
        this.channels = data().deepCopy(fields()[11].schema(), other.channels);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.endpoints)) {
        this.endpoints = data().deepCopy(fields()[12].schema(), other.endpoints);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.twitter)) {
        this.twitter = data().deepCopy(fields()[13].schema(), other.twitter);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TokenNetworkSnapshot instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.statecacher.TokenNetworkSnapshot other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tokenNetworkAddress)) {
        this.tokenNetworkAddress = data().deepCopy(fields()[0].schema(), other.tokenNetworkAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tokenNetworkDeltas)) {
        this.tokenNetworkDeltas = data().deepCopy(fields()[1].schema(), other.tokenNetworkDeltas);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.creationBlockNumber)) {
        this.creationBlockNumber = data().deepCopy(fields()[2].schema(), other.creationBlockNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[3].schema(), other.creationTimestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.stateBlockNumber)) {
        this.stateBlockNumber = data().deepCopy(fields()[4].schema(), other.stateBlockNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.stateTimestamp)) {
        this.stateTimestamp = data().deepCopy(fields()[5].schema(), other.stateTimestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.token)) {
        this.token = data().deepCopy(fields()[6].schema(), other.token);
        fieldSetFlags()[6] = true;
      }
      this.tokenBuilder = null;
      if (isValidValue(fields()[7], other.avgChannelDeposit)) {
        this.avgChannelDeposit = data().deepCopy(fields()[7].schema(), other.avgChannelDeposit);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalDeposit)) {
        this.totalDeposit = data().deepCopy(fields()[8].schema(), other.totalDeposit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.users)) {
        this.users = data().deepCopy(fields()[9].schema(), other.users);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[10].schema(), other.blockNumber);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.channels)) {
        this.channels = data().deepCopy(fields()[11].schema(), other.channels);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.endpoints)) {
        this.endpoints = data().deepCopy(fields()[12].schema(), other.endpoints);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.twitter)) {
        this.twitter = data().deepCopy(fields()[13].schema(), other.twitter);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'tokenNetworkAddress' field.
      * @return The value.
      */
    public java.lang.String getTokenNetworkAddress() {
      return tokenNetworkAddress;
    }

    /**
      * Sets the value of the 'tokenNetworkAddress' field.
      * @param value The value of 'tokenNetworkAddress'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setTokenNetworkAddress(java.lang.String value) {
      validate(fields()[0], value);
      this.tokenNetworkAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenNetworkAddress' field has been set.
      * @return True if the 'tokenNetworkAddress' field has been set, false otherwise.
      */
    public boolean hasTokenNetworkAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tokenNetworkAddress' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearTokenNetworkAddress() {
      tokenNetworkAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenNetworkDeltas' field.
      * @return The value.
      */
    public java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> getTokenNetworkDeltas() {
      return tokenNetworkDeltas;
    }

    /**
      * Sets the value of the 'tokenNetworkDeltas' field.
      * @param value The value of 'tokenNetworkDeltas'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setTokenNetworkDeltas(java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> value) {
      validate(fields()[1], value);
      this.tokenNetworkDeltas = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenNetworkDeltas' field has been set.
      * @return True if the 'tokenNetworkDeltas' field has been set, false otherwise.
      */
    public boolean hasTokenNetworkDeltas() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tokenNetworkDeltas' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearTokenNetworkDeltas() {
      tokenNetworkDeltas = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationBlockNumber' field.
      * @return The value.
      */
    public java.lang.Long getCreationBlockNumber() {
      return creationBlockNumber;
    }

    /**
      * Sets the value of the 'creationBlockNumber' field.
      * @param value The value of 'creationBlockNumber'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setCreationBlockNumber(long value) {
      validate(fields()[2], value);
      this.creationBlockNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'creationBlockNumber' field has been set.
      * @return True if the 'creationBlockNumber' field has been set, false otherwise.
      */
    public boolean hasCreationBlockNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'creationBlockNumber' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearCreationBlockNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getCreationTimestamp() {
      return creationTimestamp;
    }

    /**
      * Sets the value of the 'creationTimestamp' field.
      * @param value The value of 'creationTimestamp'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setCreationTimestamp(long value) {
      validate(fields()[3], value);
      this.creationTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTimestamp' field has been set.
      * @return True if the 'creationTimestamp' field has been set, false otherwise.
      */
    public boolean hasCreationTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'creationTimestamp' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearCreationTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateBlockNumber' field.
      * @return The value.
      */
    public java.lang.Long getStateBlockNumber() {
      return stateBlockNumber;
    }

    /**
      * Sets the value of the 'stateBlockNumber' field.
      * @param value The value of 'stateBlockNumber'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setStateBlockNumber(long value) {
      validate(fields()[4], value);
      this.stateBlockNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'stateBlockNumber' field has been set.
      * @return True if the 'stateBlockNumber' field has been set, false otherwise.
      */
    public boolean hasStateBlockNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'stateBlockNumber' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearStateBlockNumber() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getStateTimestamp() {
      return stateTimestamp;
    }

    /**
      * Sets the value of the 'stateTimestamp' field.
      * @param value The value of 'stateTimestamp'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setStateTimestamp(long value) {
      validate(fields()[5], value);
      this.stateTimestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'stateTimestamp' field has been set.
      * @return True if the 'stateTimestamp' field has been set, false otherwise.
      */
    public boolean hasStateTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'stateTimestamp' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearStateTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public io.raidenmap.statecacher.Token getToken() {
      return token;
    }

    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setToken(io.raidenmap.statecacher.Token value) {
      validate(fields()[6], value);
      this.tokenBuilder = null;
      this.token = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'token' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.raidenmap.statecacher.Token.Builder getTokenBuilder() {
      if (tokenBuilder == null) {
        if (hasToken()) {
          setTokenBuilder(io.raidenmap.statecacher.Token.newBuilder(token));
        } else {
          setTokenBuilder(io.raidenmap.statecacher.Token.newBuilder());
        }
      }
      return tokenBuilder;
    }

    /**
     * Sets the Builder instance for the 'token' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setTokenBuilder(io.raidenmap.statecacher.Token.Builder value) {
      clearToken();
      tokenBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'token' field has an active Builder instance
     * @return True if the 'token' field has an active Builder instance
     */
    public boolean hasTokenBuilder() {
      return tokenBuilder != null;
    }

    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearToken() {
      token = null;
      tokenBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'avgChannelDeposit' field.
      * @return The value.
      */
    public java.lang.Double getAvgChannelDeposit() {
      return avgChannelDeposit;
    }

    /**
      * Sets the value of the 'avgChannelDeposit' field.
      * @param value The value of 'avgChannelDeposit'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setAvgChannelDeposit(double value) {
      validate(fields()[7], value);
      this.avgChannelDeposit = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'avgChannelDeposit' field has been set.
      * @return True if the 'avgChannelDeposit' field has been set, false otherwise.
      */
    public boolean hasAvgChannelDeposit() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'avgChannelDeposit' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearAvgChannelDeposit() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDeposit' field.
      * @return The value.
      */
    public java.lang.Long getTotalDeposit() {
      return totalDeposit;
    }

    /**
      * Sets the value of the 'totalDeposit' field.
      * @param value The value of 'totalDeposit'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setTotalDeposit(long value) {
      validate(fields()[8], value);
      this.totalDeposit = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDeposit' field has been set.
      * @return True if the 'totalDeposit' field has been set, false otherwise.
      */
    public boolean hasTotalDeposit() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'totalDeposit' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearTotalDeposit() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'users' field.
      * @return The value.
      */
    public java.lang.Integer getUsers() {
      return users;
    }

    /**
      * Sets the value of the 'users' field.
      * @param value The value of 'users'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setUsers(int value) {
      validate(fields()[9], value);
      this.users = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'users' field has been set.
      * @return True if the 'users' field has been set, false otherwise.
      */
    public boolean hasUsers() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'users' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearUsers() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockNumber' field.
      * @return The value.
      */
    public java.lang.Long getBlockNumber() {
      return blockNumber;
    }

    /**
      * Sets the value of the 'blockNumber' field.
      * @param value The value of 'blockNumber'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setBlockNumber(long value) {
      validate(fields()[10], value);
      this.blockNumber = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'blockNumber' field has been set.
      * @return True if the 'blockNumber' field has been set, false otherwise.
      */
    public boolean hasBlockNumber() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'blockNumber' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearBlockNumber() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'channels' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> getChannels() {
      return channels;
    }

    /**
      * Sets the value of the 'channels' field.
      * @param value The value of 'channels'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setChannels(java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel> value) {
      validate(fields()[11], value);
      this.channels = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'channels' field has been set.
      * @return True if the 'channels' field has been set, false otherwise.
      */
    public boolean hasChannels() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'channels' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearChannels() {
      channels = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'endpoints' field.
      * @return The value.
      */
    public java.util.List<io.raidenmap.Endpoint> getEndpoints() {
      return endpoints;
    }

    /**
      * Sets the value of the 'endpoints' field.
      * @param value The value of 'endpoints'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setEndpoints(java.util.List<io.raidenmap.Endpoint> value) {
      validate(fields()[12], value);
      this.endpoints = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'endpoints' field has been set.
      * @return True if the 'endpoints' field has been set, false otherwise.
      */
    public boolean hasEndpoints() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'endpoints' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearEndpoints() {
      endpoints = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'twitter' field.
      * @return The value.
      */
    public java.lang.String getTwitter() {
      return twitter;
    }

    /**
      * Sets the value of the 'twitter' field.
      * @param value The value of 'twitter'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder setTwitter(java.lang.String value) {
      validate(fields()[13], value);
      this.twitter = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'twitter' field has been set.
      * @return True if the 'twitter' field has been set, false otherwise.
      */
    public boolean hasTwitter() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'twitter' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.TokenNetworkSnapshot.Builder clearTwitter() {
      twitter = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TokenNetworkSnapshot build() {
      try {
        TokenNetworkSnapshot record = new TokenNetworkSnapshot();
        record.tokenNetworkAddress = fieldSetFlags()[0] ? this.tokenNetworkAddress : (java.lang.String) defaultValue(fields()[0]);
        record.tokenNetworkDeltas = fieldSetFlags()[1] ? this.tokenNetworkDeltas : (java.util.List<io.raidenmap.statecacher.TokenNetworkDelta>) defaultValue(fields()[1]);
        record.creationBlockNumber = fieldSetFlags()[2] ? this.creationBlockNumber : (java.lang.Long) defaultValue(fields()[2]);
        record.creationTimestamp = fieldSetFlags()[3] ? this.creationTimestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.stateBlockNumber = fieldSetFlags()[4] ? this.stateBlockNumber : (java.lang.Long) defaultValue(fields()[4]);
        record.stateTimestamp = fieldSetFlags()[5] ? this.stateTimestamp : (java.lang.Long) defaultValue(fields()[5]);
        if (tokenBuilder != null) {
          record.token = this.tokenBuilder.build();
        } else {
          record.token = fieldSetFlags()[6] ? this.token : (io.raidenmap.statecacher.Token) defaultValue(fields()[6]);
        }
        record.avgChannelDeposit = fieldSetFlags()[7] ? this.avgChannelDeposit : (java.lang.Double) defaultValue(fields()[7]);
        record.totalDeposit = fieldSetFlags()[8] ? this.totalDeposit : (java.lang.Long) defaultValue(fields()[8]);
        record.users = fieldSetFlags()[9] ? this.users : (java.lang.Integer) defaultValue(fields()[9]);
        record.blockNumber = fieldSetFlags()[10] ? this.blockNumber : (java.lang.Long) defaultValue(fields()[10]);
        record.channels = fieldSetFlags()[11] ? this.channels : (java.util.Map<java.lang.String,io.raidenmap.statecacher.Channel>) defaultValue(fields()[11]);
        record.endpoints = fieldSetFlags()[12] ? this.endpoints : (java.util.List<io.raidenmap.Endpoint>) defaultValue(fields()[12]);
        record.twitter = fieldSetFlags()[13] ? this.twitter : (java.lang.String) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TokenNetworkSnapshot>
    WRITER$ = (org.apache.avro.io.DatumWriter<TokenNetworkSnapshot>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TokenNetworkSnapshot>
    READER$ = (org.apache.avro.io.DatumReader<TokenNetworkSnapshot>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
