/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.statecacher;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RaidenDelta extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5624903804620818816L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RaidenDelta\",\"namespace\":\"io.raidenmap.statecacher\",\"fields\":[{\"name\":\"tokenNetworksCount\",\"type\":\"int\"},{\"name\":\"userCount\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"blockNumber\",\"type\":\"long\"},{\"name\":\"btcValue\",\"type\":\"int\"},{\"name\":\"ethValue\",\"type\":\"int\"},{\"name\":\"tokenNetworksChanges\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TokenNetworkDelta\",\"fields\":[{\"name\":\"token\",\"type\":{\"type\":\"record\",\"name\":\"Token\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tag\",\"type\":\"string\"},{\"name\":\"imageUrl\",\"type\":\"string\"},{\"name\":\"valueUsd\",\"type\":\"double\"},{\"name\":\"valueEth\",\"type\":\"double\"},{\"name\":\"valueBtc\",\"type\":\"double\"},{\"name\":\"priceChangeDayUsd\",\"type\":\"float\"},{\"name\":\"priceChangeWeekUsd\",\"type\":\"float\"},{\"name\":\"priceChangeDayEth\",\"type\":\"float\"},{\"name\":\"priceChangeWeekEth\",\"type\":\"float\"},{\"name\":\"priceChangeDayBtc\",\"type\":\"float\"},{\"name\":\"priceChangeWeekBtc\",\"type\":\"float\"},{\"name\":\"marketCap\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"double\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}},{\"name\":\"channels\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Channel\",\"fields\":[{\"name\":\"channelId\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"lastStateChangeBlock\",\"type\":\"long\"},{\"name\":\"settleTimeout\",\"type\":\"long\"},{\"name\":\"firstParticipant\",\"type\":{\"type\":\"record\",\"name\":\"Participant\",\"fields\":[{\"name\":\"ethAddress\",\"type\":\"string\"},{\"name\":\"deposit\",\"type\":\"long\"},{\"name\":\"withdrawnAmount\",\"type\":\"long\"},{\"name\":\"wantsToClose\",\"type\":\"boolean\"}]}},{\"name\":\"secondParticipant\",\"type\":\"Participant\"}]}}},{\"name\":\"tokenNetworkAddress\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"channelsCount\",\"type\":\"int\"},{\"name\":\"openChannels\",\"type\":\"int\"},{\"name\":\"closedChannels\",\"type\":\"int\"},{\"name\":\"settledChannels\",\"type\":\"int\"},{\"name\":\"avgChannelDeposit\",\"type\":\"int\"},{\"name\":\"totalDeposit\",\"type\":\"long\"},{\"name\":\"users\",\"type\":\"int\"},{\"name\":\"blockNumber\",\"type\":\"long\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RaidenDelta> ENCODER =
      new BinaryMessageEncoder<RaidenDelta>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RaidenDelta> DECODER =
      new BinaryMessageDecoder<RaidenDelta>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RaidenDelta> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RaidenDelta> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RaidenDelta>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RaidenDelta to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RaidenDelta from a ByteBuffer. */
  public static RaidenDelta fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int tokenNetworksCount;
  @Deprecated public int userCount;
  @Deprecated public long timestamp;
  @Deprecated public long blockNumber;
  @Deprecated public int btcValue;
  @Deprecated public int ethValue;
  @Deprecated public java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> tokenNetworksChanges;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RaidenDelta() {}

  /**
   * All-args constructor.
   * @param tokenNetworksCount The new value for tokenNetworksCount
   * @param userCount The new value for userCount
   * @param timestamp The new value for timestamp
   * @param blockNumber The new value for blockNumber
   * @param btcValue The new value for btcValue
   * @param ethValue The new value for ethValue
   * @param tokenNetworksChanges The new value for tokenNetworksChanges
   */
  public RaidenDelta(java.lang.Integer tokenNetworksCount, java.lang.Integer userCount, java.lang.Long timestamp, java.lang.Long blockNumber, java.lang.Integer btcValue, java.lang.Integer ethValue, java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> tokenNetworksChanges) {
    this.tokenNetworksCount = tokenNetworksCount;
    this.userCount = userCount;
    this.timestamp = timestamp;
    this.blockNumber = blockNumber;
    this.btcValue = btcValue;
    this.ethValue = ethValue;
    this.tokenNetworksChanges = tokenNetworksChanges;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tokenNetworksCount;
    case 1: return userCount;
    case 2: return timestamp;
    case 3: return blockNumber;
    case 4: return btcValue;
    case 5: return ethValue;
    case 6: return tokenNetworksChanges;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tokenNetworksCount = (java.lang.Integer)value$; break;
    case 1: userCount = (java.lang.Integer)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: blockNumber = (java.lang.Long)value$; break;
    case 4: btcValue = (java.lang.Integer)value$; break;
    case 5: ethValue = (java.lang.Integer)value$; break;
    case 6: tokenNetworksChanges = (java.util.List<io.raidenmap.statecacher.TokenNetworkDelta>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tokenNetworksCount' field.
   * @return The value of the 'tokenNetworksCount' field.
   */
  public java.lang.Integer getTokenNetworksCount() {
    return tokenNetworksCount;
  }

  /**
   * Sets the value of the 'tokenNetworksCount' field.
   * @param value the value to set.
   */
  public void setTokenNetworksCount(java.lang.Integer value) {
    this.tokenNetworksCount = value;
  }

  /**
   * Gets the value of the 'userCount' field.
   * @return The value of the 'userCount' field.
   */
  public java.lang.Integer getUserCount() {
    return userCount;
  }

  /**
   * Sets the value of the 'userCount' field.
   * @param value the value to set.
   */
  public void setUserCount(java.lang.Integer value) {
    this.userCount = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'blockNumber' field.
   * @return The value of the 'blockNumber' field.
   */
  public java.lang.Long getBlockNumber() {
    return blockNumber;
  }

  /**
   * Sets the value of the 'blockNumber' field.
   * @param value the value to set.
   */
  public void setBlockNumber(java.lang.Long value) {
    this.blockNumber = value;
  }

  /**
   * Gets the value of the 'btcValue' field.
   * @return The value of the 'btcValue' field.
   */
  public java.lang.Integer getBtcValue() {
    return btcValue;
  }

  /**
   * Sets the value of the 'btcValue' field.
   * @param value the value to set.
   */
  public void setBtcValue(java.lang.Integer value) {
    this.btcValue = value;
  }

  /**
   * Gets the value of the 'ethValue' field.
   * @return The value of the 'ethValue' field.
   */
  public java.lang.Integer getEthValue() {
    return ethValue;
  }

  /**
   * Sets the value of the 'ethValue' field.
   * @param value the value to set.
   */
  public void setEthValue(java.lang.Integer value) {
    this.ethValue = value;
  }

  /**
   * Gets the value of the 'tokenNetworksChanges' field.
   * @return The value of the 'tokenNetworksChanges' field.
   */
  public java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> getTokenNetworksChanges() {
    return tokenNetworksChanges;
  }

  /**
   * Sets the value of the 'tokenNetworksChanges' field.
   * @param value the value to set.
   */
  public void setTokenNetworksChanges(java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> value) {
    this.tokenNetworksChanges = value;
  }

  /**
   * Creates a new RaidenDelta RecordBuilder.
   * @return A new RaidenDelta RecordBuilder
   */
  public static io.raidenmap.statecacher.RaidenDelta.Builder newBuilder() {
    return new io.raidenmap.statecacher.RaidenDelta.Builder();
  }

  /**
   * Creates a new RaidenDelta RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RaidenDelta RecordBuilder
   */
  public static io.raidenmap.statecacher.RaidenDelta.Builder newBuilder(io.raidenmap.statecacher.RaidenDelta.Builder other) {
    return new io.raidenmap.statecacher.RaidenDelta.Builder(other);
  }

  /**
   * Creates a new RaidenDelta RecordBuilder by copying an existing RaidenDelta instance.
   * @param other The existing instance to copy.
   * @return A new RaidenDelta RecordBuilder
   */
  public static io.raidenmap.statecacher.RaidenDelta.Builder newBuilder(io.raidenmap.statecacher.RaidenDelta other) {
    return new io.raidenmap.statecacher.RaidenDelta.Builder(other);
  }

  /**
   * RecordBuilder for RaidenDelta instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RaidenDelta>
    implements org.apache.avro.data.RecordBuilder<RaidenDelta> {

    private int tokenNetworksCount;
    private int userCount;
    private long timestamp;
    private long blockNumber;
    private int btcValue;
    private int ethValue;
    private java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> tokenNetworksChanges;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.statecacher.RaidenDelta.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tokenNetworksCount)) {
        this.tokenNetworksCount = data().deepCopy(fields()[0].schema(), other.tokenNetworksCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userCount)) {
        this.userCount = data().deepCopy(fields()[1].schema(), other.userCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[3].schema(), other.blockNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.btcValue)) {
        this.btcValue = data().deepCopy(fields()[4].schema(), other.btcValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ethValue)) {
        this.ethValue = data().deepCopy(fields()[5].schema(), other.ethValue);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tokenNetworksChanges)) {
        this.tokenNetworksChanges = data().deepCopy(fields()[6].schema(), other.tokenNetworksChanges);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RaidenDelta instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.statecacher.RaidenDelta other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tokenNetworksCount)) {
        this.tokenNetworksCount = data().deepCopy(fields()[0].schema(), other.tokenNetworksCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userCount)) {
        this.userCount = data().deepCopy(fields()[1].schema(), other.userCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[3].schema(), other.blockNumber);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.btcValue)) {
        this.btcValue = data().deepCopy(fields()[4].schema(), other.btcValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ethValue)) {
        this.ethValue = data().deepCopy(fields()[5].schema(), other.ethValue);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tokenNetworksChanges)) {
        this.tokenNetworksChanges = data().deepCopy(fields()[6].schema(), other.tokenNetworksChanges);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'tokenNetworksCount' field.
      * @return The value.
      */
    public java.lang.Integer getTokenNetworksCount() {
      return tokenNetworksCount;
    }

    /**
      * Sets the value of the 'tokenNetworksCount' field.
      * @param value The value of 'tokenNetworksCount'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setTokenNetworksCount(int value) {
      validate(fields()[0], value);
      this.tokenNetworksCount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenNetworksCount' field has been set.
      * @return True if the 'tokenNetworksCount' field has been set, false otherwise.
      */
    public boolean hasTokenNetworksCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tokenNetworksCount' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearTokenNetworksCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userCount' field.
      * @return The value.
      */
    public java.lang.Integer getUserCount() {
      return userCount;
    }

    /**
      * Sets the value of the 'userCount' field.
      * @param value The value of 'userCount'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setUserCount(int value) {
      validate(fields()[1], value);
      this.userCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userCount' field has been set.
      * @return True if the 'userCount' field has been set, false otherwise.
      */
    public boolean hasUserCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userCount' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearUserCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockNumber' field.
      * @return The value.
      */
    public java.lang.Long getBlockNumber() {
      return blockNumber;
    }

    /**
      * Sets the value of the 'blockNumber' field.
      * @param value The value of 'blockNumber'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setBlockNumber(long value) {
      validate(fields()[3], value);
      this.blockNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'blockNumber' field has been set.
      * @return True if the 'blockNumber' field has been set, false otherwise.
      */
    public boolean hasBlockNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'blockNumber' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearBlockNumber() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'btcValue' field.
      * @return The value.
      */
    public java.lang.Integer getBtcValue() {
      return btcValue;
    }

    /**
      * Sets the value of the 'btcValue' field.
      * @param value The value of 'btcValue'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setBtcValue(int value) {
      validate(fields()[4], value);
      this.btcValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'btcValue' field has been set.
      * @return True if the 'btcValue' field has been set, false otherwise.
      */
    public boolean hasBtcValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'btcValue' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearBtcValue() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ethValue' field.
      * @return The value.
      */
    public java.lang.Integer getEthValue() {
      return ethValue;
    }

    /**
      * Sets the value of the 'ethValue' field.
      * @param value The value of 'ethValue'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setEthValue(int value) {
      validate(fields()[5], value);
      this.ethValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ethValue' field has been set.
      * @return True if the 'ethValue' field has been set, false otherwise.
      */
    public boolean hasEthValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ethValue' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearEthValue() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tokenNetworksChanges' field.
      * @return The value.
      */
    public java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> getTokenNetworksChanges() {
      return tokenNetworksChanges;
    }

    /**
      * Sets the value of the 'tokenNetworksChanges' field.
      * @param value The value of 'tokenNetworksChanges'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder setTokenNetworksChanges(java.util.List<io.raidenmap.statecacher.TokenNetworkDelta> value) {
      validate(fields()[6], value);
      this.tokenNetworksChanges = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tokenNetworksChanges' field has been set.
      * @return True if the 'tokenNetworksChanges' field has been set, false otherwise.
      */
    public boolean hasTokenNetworksChanges() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tokenNetworksChanges' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.RaidenDelta.Builder clearTokenNetworksChanges() {
      tokenNetworksChanges = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RaidenDelta build() {
      try {
        RaidenDelta record = new RaidenDelta();
        record.tokenNetworksCount = fieldSetFlags()[0] ? this.tokenNetworksCount : (java.lang.Integer) defaultValue(fields()[0]);
        record.userCount = fieldSetFlags()[1] ? this.userCount : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.blockNumber = fieldSetFlags()[3] ? this.blockNumber : (java.lang.Long) defaultValue(fields()[3]);
        record.btcValue = fieldSetFlags()[4] ? this.btcValue : (java.lang.Integer) defaultValue(fields()[4]);
        record.ethValue = fieldSetFlags()[5] ? this.ethValue : (java.lang.Integer) defaultValue(fields()[5]);
        record.tokenNetworksChanges = fieldSetFlags()[6] ? this.tokenNetworksChanges : (java.util.List<io.raidenmap.statecacher.TokenNetworkDelta>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RaidenDelta>
    WRITER$ = (org.apache.avro.io.DatumWriter<RaidenDelta>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RaidenDelta>
    READER$ = (org.apache.avro.io.DatumReader<RaidenDelta>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
