/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.statecacher;

import StateCacherException.NotMatchingDataException;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Channel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6494115306246969449L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Channel\",\"namespace\":\"io.raidenmap.statecacher\",\"fields\":[{\"name\":\"channelId\",\"type\":\"int\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"lastStateChangeBlock\",\"type\":\"long\"},{\"name\":\"settleTimeout\",\"type\":\"long\"},{\"name\":\"firstParticipant\",\"type\":{\"type\":\"record\",\"name\":\"Participant\",\"fields\":[{\"name\":\"ethAddress\",\"type\":\"string\"},{\"name\":\"deposit\",\"type\":\"long\"},{\"name\":\"withdrawnAmount\",\"type\":\"long\"},{\"name\":\"wantsToClose\",\"type\":\"boolean\"}]}},{\"name\":\"secondParticipant\",\"type\":\"Participant\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Channel> ENCODER =
      new BinaryMessageEncoder<Channel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Channel> DECODER =
      new BinaryMessageDecoder<Channel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Channel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Channel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Channel>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Channel to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Channel from a ByteBuffer. */
  public static Channel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int channelId;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public long lastStateChangeBlock;
  @Deprecated public long settleTimeout;
  @Deprecated public io.raidenmap.statecacher.Participant firstParticipant;
  @Deprecated public io.raidenmap.statecacher.Participant secondParticipant;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Channel() {}

  /**
   * All-args constructor.
   * @param channelId The new value for channelId
   * @param state The new value for state
   * @param lastStateChangeBlock The new value for lastStateChangeBlock
   * @param settleTimeout The new value for settleTimeout
   * @param firstParticipant The new value for firstParticipant
   * @param secondParticipant The new value for secondParticipant
   */
  public Channel(java.lang.Integer channelId, java.lang.CharSequence state, java.lang.Long lastStateChangeBlock, java.lang.Long settleTimeout, io.raidenmap.statecacher.Participant firstParticipant, io.raidenmap.statecacher.Participant secondParticipant) {
    this.channelId = channelId;
    this.state = state;
    this.lastStateChangeBlock = lastStateChangeBlock;
    this.settleTimeout = settleTimeout;
    this.firstParticipant = firstParticipant;
    this.secondParticipant = secondParticipant;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return channelId;
    case 1: return state;
    case 2: return lastStateChangeBlock;
    case 3: return settleTimeout;
    case 4: return firstParticipant;
    case 5: return secondParticipant;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: channelId = (java.lang.Integer)value$; break;
    case 1: state = (java.lang.CharSequence)value$; break;
    case 2: lastStateChangeBlock = (java.lang.Long)value$; break;
    case 3: settleTimeout = (java.lang.Long)value$; break;
    case 4: firstParticipant = (io.raidenmap.statecacher.Participant)value$; break;
    case 5: secondParticipant = (io.raidenmap.statecacher.Participant)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'channelId' field.
   * @return The value of the 'channelId' field.
   */
  public java.lang.Integer getChannelId() {
    return channelId;
  }

  /**
   * Sets the value of the 'channelId' field.
   * @param value the value to set.
   */
  public void setChannelId(java.lang.Integer value) {
    this.channelId = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'lastStateChangeBlock' field.
   * @return The value of the 'lastStateChangeBlock' field.
   */
  public java.lang.Long getLastStateChangeBlock() {
    return lastStateChangeBlock;
  }

  /**
   * Sets the value of the 'lastStateChangeBlock' field.
   * @param value the value to set.
   */
  public void setLastStateChangeBlock(java.lang.Long value) {
    this.lastStateChangeBlock = value;
  }

  /**
   * Gets the value of the 'settleTimeout' field.
   * @return The value of the 'settleTimeout' field.
   */
  public java.lang.Long getSettleTimeout() {
    return settleTimeout;
  }

  /**
   * Sets the value of the 'settleTimeout' field.
   * @param value the value to set.
   */
  public void setSettleTimeout(java.lang.Long value) {
    this.settleTimeout = value;
  }

  /**
   * Gets the value of the 'firstParticipant' field.
   * @return The value of the 'firstParticipant' field.
   */
  public io.raidenmap.statecacher.Participant getFirstParticipant() {
    return firstParticipant;
  }

  /**
   * Sets the value of the 'firstParticipant' field.
   * @param value the value to set.
   */
  public void setFirstParticipant(io.raidenmap.statecacher.Participant value) {
    this.firstParticipant = value;
  }

  /**
   * Gets the value of the 'secondParticipant' field.
   * @return The value of the 'secondParticipant' field.
   */
  public io.raidenmap.statecacher.Participant getSecondParticipant() {
    return secondParticipant;
  }

  /**
   * Sets the value of the 'secondParticipant' field.
   * @param value the value to set.
   */
  public void setSecondParticipant(io.raidenmap.statecacher.Participant value) {
    this.secondParticipant = value;
  }

  /**
   * Creates a new Channel RecordBuilder.
   * @return A new Channel RecordBuilder
   */
  public static io.raidenmap.statecacher.Channel.Builder newBuilder() {
    return new io.raidenmap.statecacher.Channel.Builder();
  }

  /**
   * Creates a new Channel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Channel RecordBuilder
   */
  public static io.raidenmap.statecacher.Channel.Builder newBuilder(io.raidenmap.statecacher.Channel.Builder other) {
    return new io.raidenmap.statecacher.Channel.Builder(other);
  }

  /**
   * Creates a new Channel RecordBuilder by copying an existing Channel instance.
   * @param other The existing instance to copy.
   * @return A new Channel RecordBuilder
   */
  public static io.raidenmap.statecacher.Channel.Builder newBuilder(io.raidenmap.statecacher.Channel other) {
    return new io.raidenmap.statecacher.Channel.Builder(other);
  }

  /**
   * RecordBuilder for Channel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Channel>
    implements org.apache.avro.data.RecordBuilder<Channel> {

    private int channelId;
    private java.lang.CharSequence state;
    private long lastStateChangeBlock;
    private long settleTimeout;
    private io.raidenmap.statecacher.Participant firstParticipant;
    private io.raidenmap.statecacher.Participant.Builder firstParticipantBuilder;
    private io.raidenmap.statecacher.Participant secondParticipant;
    private io.raidenmap.statecacher.Participant.Builder secondParticipantBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.statecacher.Channel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.channelId)) {
        this.channelId = data().deepCopy(fields()[0].schema(), other.channelId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastStateChangeBlock)) {
        this.lastStateChangeBlock = data().deepCopy(fields()[2].schema(), other.lastStateChangeBlock);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.settleTimeout)) {
        this.settleTimeout = data().deepCopy(fields()[3].schema(), other.settleTimeout);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.firstParticipant)) {
        this.firstParticipant = data().deepCopy(fields()[4].schema(), other.firstParticipant);
        fieldSetFlags()[4] = true;
      }
      if (other.hasFirstParticipantBuilder()) {
        this.firstParticipantBuilder = io.raidenmap.statecacher.Participant.newBuilder(other.getFirstParticipantBuilder());
      }
      if (isValidValue(fields()[5], other.secondParticipant)) {
        this.secondParticipant = data().deepCopy(fields()[5].schema(), other.secondParticipant);
        fieldSetFlags()[5] = true;
      }
      if (other.hasSecondParticipantBuilder()) {
        this.secondParticipantBuilder = io.raidenmap.statecacher.Participant.newBuilder(other.getSecondParticipantBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Channel instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.statecacher.Channel other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.channelId)) {
        this.channelId = data().deepCopy(fields()[0].schema(), other.channelId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastStateChangeBlock)) {
        this.lastStateChangeBlock = data().deepCopy(fields()[2].schema(), other.lastStateChangeBlock);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.settleTimeout)) {
        this.settleTimeout = data().deepCopy(fields()[3].schema(), other.settleTimeout);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.firstParticipant)) {
        this.firstParticipant = data().deepCopy(fields()[4].schema(), other.firstParticipant);
        fieldSetFlags()[4] = true;
      }
      this.firstParticipantBuilder = null;
      if (isValidValue(fields()[5], other.secondParticipant)) {
        this.secondParticipant = data().deepCopy(fields()[5].schema(), other.secondParticipant);
        fieldSetFlags()[5] = true;
      }
      this.secondParticipantBuilder = null;
    }

    /**
      * Gets the value of the 'channelId' field.
      * @return The value.
      */
    public java.lang.Integer getChannelId() {
      return channelId;
    }

    /**
      * Sets the value of the 'channelId' field.
      * @param value The value of 'channelId'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder setChannelId(int value) {
      validate(fields()[0], value);
      this.channelId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'channelId' field has been set.
      * @return True if the 'channelId' field has been set, false otherwise.
      */
    public boolean hasChannelId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'channelId' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder clearChannelId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder setState(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder clearState() {
      state = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastStateChangeBlock' field.
      * @return The value.
      */
    public java.lang.Long getLastStateChangeBlock() {
      return lastStateChangeBlock;
    }

    /**
      * Sets the value of the 'lastStateChangeBlock' field.
      * @param value The value of 'lastStateChangeBlock'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder setLastStateChangeBlock(long value) {
      validate(fields()[2], value);
      this.lastStateChangeBlock = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastStateChangeBlock' field has been set.
      * @return True if the 'lastStateChangeBlock' field has been set, false otherwise.
      */
    public boolean hasLastStateChangeBlock() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastStateChangeBlock' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder clearLastStateChangeBlock() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'settleTimeout' field.
      * @return The value.
      */
    public java.lang.Long getSettleTimeout() {
      return settleTimeout;
    }

    /**
      * Sets the value of the 'settleTimeout' field.
      * @param value The value of 'settleTimeout'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder setSettleTimeout(long value) {
      validate(fields()[3], value);
      this.settleTimeout = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'settleTimeout' field has been set.
      * @return True if the 'settleTimeout' field has been set, false otherwise.
      */
    public boolean hasSettleTimeout() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'settleTimeout' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder clearSettleTimeout() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstParticipant' field.
      * @return The value.
      */
    public io.raidenmap.statecacher.Participant getFirstParticipant() {
      return firstParticipant;
    }

    /**
      * Sets the value of the 'firstParticipant' field.
      * @param value The value of 'firstParticipant'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder setFirstParticipant(io.raidenmap.statecacher.Participant value) {
      validate(fields()[4], value);
      this.firstParticipantBuilder = null;
      this.firstParticipant = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'firstParticipant' field has been set.
      * @return True if the 'firstParticipant' field has been set, false otherwise.
      */
    public boolean hasFirstParticipant() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'firstParticipant' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.raidenmap.statecacher.Participant.Builder getFirstParticipantBuilder() {
      if (firstParticipantBuilder == null) {
        if (hasFirstParticipant()) {
          setFirstParticipantBuilder(io.raidenmap.statecacher.Participant.newBuilder(firstParticipant));
        } else {
          setFirstParticipantBuilder(io.raidenmap.statecacher.Participant.newBuilder());
        }
      }
      return firstParticipantBuilder;
    }

    /**
     * Sets the Builder instance for the 'firstParticipant' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.raidenmap.statecacher.Channel.Builder setFirstParticipantBuilder(io.raidenmap.statecacher.Participant.Builder value) {
      clearFirstParticipant();
      firstParticipantBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'firstParticipant' field has an active Builder instance
     * @return True if the 'firstParticipant' field has an active Builder instance
     */
    public boolean hasFirstParticipantBuilder() {
      return firstParticipantBuilder != null;
    }

    /**
      * Clears the value of the 'firstParticipant' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder clearFirstParticipant() {
      firstParticipant = null;
      firstParticipantBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondParticipant' field.
      * @return The value.
      */
    public io.raidenmap.statecacher.Participant getSecondParticipant() {
      return secondParticipant;
    }

    /**
      * Sets the value of the 'secondParticipant' field.
      * @param value The value of 'secondParticipant'.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder setSecondParticipant(io.raidenmap.statecacher.Participant value) {
      validate(fields()[5], value);
      this.secondParticipantBuilder = null;
      this.secondParticipant = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'secondParticipant' field has been set.
      * @return True if the 'secondParticipant' field has been set, false otherwise.
      */
    public boolean hasSecondParticipant() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'secondParticipant' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.raidenmap.statecacher.Participant.Builder getSecondParticipantBuilder() {
      if (secondParticipantBuilder == null) {
        if (hasSecondParticipant()) {
          setSecondParticipantBuilder(io.raidenmap.statecacher.Participant.newBuilder(secondParticipant));
        } else {
          setSecondParticipantBuilder(io.raidenmap.statecacher.Participant.newBuilder());
        }
      }
      return secondParticipantBuilder;
    }

    /**
     * Sets the Builder instance for the 'secondParticipant' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.raidenmap.statecacher.Channel.Builder setSecondParticipantBuilder(io.raidenmap.statecacher.Participant.Builder value) {
      clearSecondParticipant();
      secondParticipantBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'secondParticipant' field has an active Builder instance
     * @return True if the 'secondParticipant' field has an active Builder instance
     */
    public boolean hasSecondParticipantBuilder() {
      return secondParticipantBuilder != null;
    }

    /**
      * Clears the value of the 'secondParticipant' field.
      * @return This builder.
      */
    public io.raidenmap.statecacher.Channel.Builder clearSecondParticipant() {
      secondParticipant = null;
      secondParticipantBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Channel build() {
      try {
        Channel record = new Channel();
        record.channelId = fieldSetFlags()[0] ? this.channelId : (java.lang.Integer) defaultValue(fields()[0]);
        record.state = fieldSetFlags()[1] ? this.state : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastStateChangeBlock = fieldSetFlags()[2] ? this.lastStateChangeBlock : (java.lang.Long) defaultValue(fields()[2]);
        record.settleTimeout = fieldSetFlags()[3] ? this.settleTimeout : (java.lang.Long) defaultValue(fields()[3]);
        if (firstParticipantBuilder != null) {
          record.firstParticipant = this.firstParticipantBuilder.build();
        } else {
          record.firstParticipant = fieldSetFlags()[4] ? this.firstParticipant : (io.raidenmap.statecacher.Participant) defaultValue(fields()[4]);
        }
        if (secondParticipantBuilder != null) {
          record.secondParticipant = this.secondParticipantBuilder.build();
        } else {
          record.secondParticipant = fieldSetFlags()[5] ? this.secondParticipant : (io.raidenmap.statecacher.Participant) defaultValue(fields()[5]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Channel>
    WRITER$ = (org.apache.avro.io.DatumWriter<Channel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Channel>
    READER$ = (org.apache.avro.io.DatumReader<Channel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  public Participant getParticipant(String address){
    if( getFirstParticipant().getEthAddress().toString().equals(address))
      return getFirstParticipant();
    else
    if( getSecondParticipant().getEthAddress().toString().equals(address))
      return getSecondParticipant();
    else {
      new NotMatchingDataException("Participant not in channel");
    }
    return null;
  }
}
