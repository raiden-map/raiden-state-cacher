/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.event.channel;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ChannelWithdraw extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3050613127079982818L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChannelWithdraw\",\"namespace\":\"io.raidenmap.event.channel\",\"fields\":[{\"name\":\"channelEvent\",\"type\":{\"type\":\"record\",\"name\":\"ChannelEvent\",\"fields\":[{\"name\":\"metadata\",\"type\":{\"type\":\"record\",\"name\":\"Metadata\",\"namespace\":\"io.raidenmap.event\",\"fields\":[{\"name\":\"blockNumber\",\"type\":\"long\"},{\"name\":\"blockTimestamp\",\"type\":\"long\"},{\"name\":\"eventTimestamp\",\"type\":\"long\"}]}},{\"name\":\"tokenNetworkAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":\"int\"}]}},{\"name\":\"participant\",\"type\":\"long\"},{\"name\":\"totalWithdraw\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChannelWithdraw> ENCODER =
      new BinaryMessageEncoder<ChannelWithdraw>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChannelWithdraw> DECODER =
      new BinaryMessageDecoder<ChannelWithdraw>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ChannelWithdraw> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ChannelWithdraw> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ChannelWithdraw>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ChannelWithdraw to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ChannelWithdraw from a ByteBuffer. */
  public static ChannelWithdraw fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.raidenmap.event.channel.ChannelEvent channelEvent;
  @Deprecated public long participant;
  @Deprecated public int totalWithdraw;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChannelWithdraw() {}

  /**
   * All-args constructor.
   * @param channelEvent The new value for channelEvent
   * @param participant The new value for participant
   * @param totalWithdraw The new value for totalWithdraw
   */
  public ChannelWithdraw(io.raidenmap.event.channel.ChannelEvent channelEvent, java.lang.Long participant, java.lang.Integer totalWithdraw) {
    this.channelEvent = channelEvent;
    this.participant = participant;
    this.totalWithdraw = totalWithdraw;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return channelEvent;
    case 1: return participant;
    case 2: return totalWithdraw;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: channelEvent = (io.raidenmap.event.channel.ChannelEvent)value$; break;
    case 1: participant = (java.lang.Long)value$; break;
    case 2: totalWithdraw = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'channelEvent' field.
   * @return The value of the 'channelEvent' field.
   */
  public io.raidenmap.event.channel.ChannelEvent getChannelEvent() {
    return channelEvent;
  }

  /**
   * Sets the value of the 'channelEvent' field.
   * @param value the value to set.
   */
  public void setChannelEvent(io.raidenmap.event.channel.ChannelEvent value) {
    this.channelEvent = value;
  }

  /**
   * Gets the value of the 'participant' field.
   * @return The value of the 'participant' field.
   */
  public java.lang.Long getParticipant() {
    return participant;
  }

  /**
   * Sets the value of the 'participant' field.
   * @param value the value to set.
   */
  public void setParticipant(java.lang.Long value) {
    this.participant = value;
  }

  /**
   * Gets the value of the 'totalWithdraw' field.
   * @return The value of the 'totalWithdraw' field.
   */
  public java.lang.Integer getTotalWithdraw() {
    return totalWithdraw;
  }

  /**
   * Sets the value of the 'totalWithdraw' field.
   * @param value the value to set.
   */
  public void setTotalWithdraw(java.lang.Integer value) {
    this.totalWithdraw = value;
  }

  /**
   * Creates a new ChannelWithdraw RecordBuilder.
   * @return A new ChannelWithdraw RecordBuilder
   */
  public static io.raidenmap.event.channel.ChannelWithdraw.Builder newBuilder() {
    return new io.raidenmap.event.channel.ChannelWithdraw.Builder();
  }

  /**
   * Creates a new ChannelWithdraw RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChannelWithdraw RecordBuilder
   */
  public static io.raidenmap.event.channel.ChannelWithdraw.Builder newBuilder(io.raidenmap.event.channel.ChannelWithdraw.Builder other) {
    return new io.raidenmap.event.channel.ChannelWithdraw.Builder(other);
  }

  /**
   * Creates a new ChannelWithdraw RecordBuilder by copying an existing ChannelWithdraw instance.
   * @param other The existing instance to copy.
   * @return A new ChannelWithdraw RecordBuilder
   */
  public static io.raidenmap.event.channel.ChannelWithdraw.Builder newBuilder(io.raidenmap.event.channel.ChannelWithdraw other) {
    return new io.raidenmap.event.channel.ChannelWithdraw.Builder(other);
  }

  /**
   * RecordBuilder for ChannelWithdraw instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChannelWithdraw>
    implements org.apache.avro.data.RecordBuilder<ChannelWithdraw> {

    private io.raidenmap.event.channel.ChannelEvent channelEvent;
    private io.raidenmap.event.channel.ChannelEvent.Builder channelEventBuilder;
    private long participant;
    private int totalWithdraw;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.event.channel.ChannelWithdraw.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.channelEvent)) {
        this.channelEvent = data().deepCopy(fields()[0].schema(), other.channelEvent);
        fieldSetFlags()[0] = true;
      }
      if (other.hasChannelEventBuilder()) {
        this.channelEventBuilder = io.raidenmap.event.channel.ChannelEvent.newBuilder(other.getChannelEventBuilder());
      }
      if (isValidValue(fields()[1], other.participant)) {
        this.participant = data().deepCopy(fields()[1].schema(), other.participant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalWithdraw)) {
        this.totalWithdraw = data().deepCopy(fields()[2].schema(), other.totalWithdraw);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ChannelWithdraw instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.event.channel.ChannelWithdraw other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.channelEvent)) {
        this.channelEvent = data().deepCopy(fields()[0].schema(), other.channelEvent);
        fieldSetFlags()[0] = true;
      }
      this.channelEventBuilder = null;
      if (isValidValue(fields()[1], other.participant)) {
        this.participant = data().deepCopy(fields()[1].schema(), other.participant);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalWithdraw)) {
        this.totalWithdraw = data().deepCopy(fields()[2].schema(), other.totalWithdraw);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'channelEvent' field.
      * @return The value.
      */
    public io.raidenmap.event.channel.ChannelEvent getChannelEvent() {
      return channelEvent;
    }

    /**
      * Sets the value of the 'channelEvent' field.
      * @param value The value of 'channelEvent'.
      * @return This builder.
      */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder setChannelEvent(io.raidenmap.event.channel.ChannelEvent value) {
      validate(fields()[0], value);
      this.channelEventBuilder = null;
      this.channelEvent = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'channelEvent' field has been set.
      * @return True if the 'channelEvent' field has been set, false otherwise.
      */
    public boolean hasChannelEvent() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'channelEvent' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.raidenmap.event.channel.ChannelEvent.Builder getChannelEventBuilder() {
      if (channelEventBuilder == null) {
        if (hasChannelEvent()) {
          setChannelEventBuilder(io.raidenmap.event.channel.ChannelEvent.newBuilder(channelEvent));
        } else {
          setChannelEventBuilder(io.raidenmap.event.channel.ChannelEvent.newBuilder());
        }
      }
      return channelEventBuilder;
    }

    /**
     * Sets the Builder instance for the 'channelEvent' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder setChannelEventBuilder(io.raidenmap.event.channel.ChannelEvent.Builder value) {
      clearChannelEvent();
      channelEventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'channelEvent' field has an active Builder instance
     * @return True if the 'channelEvent' field has an active Builder instance
     */
    public boolean hasChannelEventBuilder() {
      return channelEventBuilder != null;
    }

    /**
      * Clears the value of the 'channelEvent' field.
      * @return This builder.
      */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder clearChannelEvent() {
      channelEvent = null;
      channelEventBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'participant' field.
      * @return The value.
      */
    public java.lang.Long getParticipant() {
      return participant;
    }

    /**
      * Sets the value of the 'participant' field.
      * @param value The value of 'participant'.
      * @return This builder.
      */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder setParticipant(long value) {
      validate(fields()[1], value);
      this.participant = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'participant' field has been set.
      * @return True if the 'participant' field has been set, false otherwise.
      */
    public boolean hasParticipant() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'participant' field.
      * @return This builder.
      */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder clearParticipant() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalWithdraw' field.
      * @return The value.
      */
    public java.lang.Integer getTotalWithdraw() {
      return totalWithdraw;
    }

    /**
      * Sets the value of the 'totalWithdraw' field.
      * @param value The value of 'totalWithdraw'.
      * @return This builder.
      */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder setTotalWithdraw(int value) {
      validate(fields()[2], value);
      this.totalWithdraw = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalWithdraw' field has been set.
      * @return True if the 'totalWithdraw' field has been set, false otherwise.
      */
    public boolean hasTotalWithdraw() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalWithdraw' field.
      * @return This builder.
      */
    public io.raidenmap.event.channel.ChannelWithdraw.Builder clearTotalWithdraw() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChannelWithdraw build() {
      try {
        ChannelWithdraw record = new ChannelWithdraw();
        if (channelEventBuilder != null) {
          record.channelEvent = this.channelEventBuilder.build();
        } else {
          record.channelEvent = fieldSetFlags()[0] ? this.channelEvent : (io.raidenmap.event.channel.ChannelEvent) defaultValue(fields()[0]);
        }
        record.participant = fieldSetFlags()[1] ? this.participant : (java.lang.Long) defaultValue(fields()[1]);
        record.totalWithdraw = fieldSetFlags()[2] ? this.totalWithdraw : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChannelWithdraw>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChannelWithdraw>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChannelWithdraw>
    READER$ = (org.apache.avro.io.DatumReader<ChannelWithdraw>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
