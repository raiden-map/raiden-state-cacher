/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.raidenmap.event;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AddressRegistered extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3339181557259852220L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AddressRegistered\",\"namespace\":\"io.raidenmap.event\",\"fields\":[{\"name\":\"metadata\",\"type\":{\"type\":\"record\",\"name\":\"Metadata\",\"fields\":[{\"name\":\"blockNumber\",\"type\":\"long\"},{\"name\":\"blockTimestamp\",\"type\":\"long\"},{\"name\":\"eventTimestamp\",\"type\":\"long\"}]}},{\"name\":\"ethAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endpointAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AddressRegistered> ENCODER =
      new BinaryMessageEncoder<AddressRegistered>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AddressRegistered> DECODER =
      new BinaryMessageDecoder<AddressRegistered>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AddressRegistered> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AddressRegistered> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AddressRegistered>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AddressRegistered to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AddressRegistered from a ByteBuffer. */
  public static AddressRegistered fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.raidenmap.event.Metadata metadata;
  @Deprecated public java.lang.String ethAddress;
  @Deprecated public java.lang.String endpointAddress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AddressRegistered() {}

  /**
   * All-args constructor.
   * @param metadata The new value for metadata
   * @param ethAddress The new value for ethAddress
   * @param endpointAddress The new value for endpointAddress
   */
  public AddressRegistered(io.raidenmap.event.Metadata metadata, java.lang.String ethAddress, java.lang.String endpointAddress) {
    this.metadata = metadata;
    this.ethAddress = ethAddress;
    this.endpointAddress = endpointAddress;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metadata;
    case 1: return ethAddress;
    case 2: return endpointAddress;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metadata = (io.raidenmap.event.Metadata)value$; break;
    case 1: ethAddress = (java.lang.String)value$; break;
    case 2: endpointAddress = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public io.raidenmap.event.Metadata getMetadata() {
    return metadata;
  }

  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(io.raidenmap.event.Metadata value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'ethAddress' field.
   * @return The value of the 'ethAddress' field.
   */
  public java.lang.String getEthAddress() {
    return ethAddress;
  }

  /**
   * Sets the value of the 'ethAddress' field.
   * @param value the value to set.
   */
  public void setEthAddress(java.lang.String value) {
    this.ethAddress = value;
  }

  /**
   * Gets the value of the 'endpointAddress' field.
   * @return The value of the 'endpointAddress' field.
   */
  public java.lang.String getEndpointAddress() {
    return endpointAddress;
  }

  /**
   * Sets the value of the 'endpointAddress' field.
   * @param value the value to set.
   */
  public void setEndpointAddress(java.lang.String value) {
    this.endpointAddress = value;
  }

  /**
   * Creates a new AddressRegistered RecordBuilder.
   * @return A new AddressRegistered RecordBuilder
   */
  public static io.raidenmap.event.AddressRegistered.Builder newBuilder() {
    return new io.raidenmap.event.AddressRegistered.Builder();
  }

  /**
   * Creates a new AddressRegistered RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AddressRegistered RecordBuilder
   */
  public static io.raidenmap.event.AddressRegistered.Builder newBuilder(io.raidenmap.event.AddressRegistered.Builder other) {
    return new io.raidenmap.event.AddressRegistered.Builder(other);
  }

  /**
   * Creates a new AddressRegistered RecordBuilder by copying an existing AddressRegistered instance.
   * @param other The existing instance to copy.
   * @return A new AddressRegistered RecordBuilder
   */
  public static io.raidenmap.event.AddressRegistered.Builder newBuilder(io.raidenmap.event.AddressRegistered other) {
    return new io.raidenmap.event.AddressRegistered.Builder(other);
  }

  /**
   * RecordBuilder for AddressRegistered instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AddressRegistered>
    implements org.apache.avro.data.RecordBuilder<AddressRegistered> {

    private io.raidenmap.event.Metadata metadata;
    private io.raidenmap.event.Metadata.Builder metadataBuilder;
    private java.lang.String ethAddress;
    private java.lang.String endpointAddress;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.raidenmap.event.AddressRegistered.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.metadata)) {
        this.metadata = data().deepCopy(fields()[0].schema(), other.metadata);
        fieldSetFlags()[0] = true;
      }
      if (other.hasMetadataBuilder()) {
        this.metadataBuilder = io.raidenmap.event.Metadata.newBuilder(other.getMetadataBuilder());
      }
      if (isValidValue(fields()[1], other.ethAddress)) {
        this.ethAddress = data().deepCopy(fields()[1].schema(), other.ethAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endpointAddress)) {
        this.endpointAddress = data().deepCopy(fields()[2].schema(), other.endpointAddress);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AddressRegistered instance
     * @param other The existing instance to copy.
     */
    private Builder(io.raidenmap.event.AddressRegistered other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.metadata)) {
        this.metadata = data().deepCopy(fields()[0].schema(), other.metadata);
        fieldSetFlags()[0] = true;
      }
      this.metadataBuilder = null;
      if (isValidValue(fields()[1], other.ethAddress)) {
        this.ethAddress = data().deepCopy(fields()[1].schema(), other.ethAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endpointAddress)) {
        this.endpointAddress = data().deepCopy(fields()[2].schema(), other.endpointAddress);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public io.raidenmap.event.Metadata getMetadata() {
      return metadata;
    }

    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public io.raidenmap.event.AddressRegistered.Builder setMetadata(io.raidenmap.event.Metadata value) {
      validate(fields()[0], value);
      this.metadataBuilder = null;
      this.metadata = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'metadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.raidenmap.event.Metadata.Builder getMetadataBuilder() {
      if (metadataBuilder == null) {
        if (hasMetadata()) {
          setMetadataBuilder(io.raidenmap.event.Metadata.newBuilder(metadata));
        } else {
          setMetadataBuilder(io.raidenmap.event.Metadata.newBuilder());
        }
      }
      return metadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'metadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.raidenmap.event.AddressRegistered.Builder setMetadataBuilder(io.raidenmap.event.Metadata.Builder value) {
      clearMetadata();
      metadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'metadata' field has an active Builder instance
     * @return True if the 'metadata' field has an active Builder instance
     */
    public boolean hasMetadataBuilder() {
      return metadataBuilder != null;
    }

    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public io.raidenmap.event.AddressRegistered.Builder clearMetadata() {
      metadata = null;
      metadataBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ethAddress' field.
      * @return The value.
      */
    public java.lang.String getEthAddress() {
      return ethAddress;
    }

    /**
      * Sets the value of the 'ethAddress' field.
      * @param value The value of 'ethAddress'.
      * @return This builder.
      */
    public io.raidenmap.event.AddressRegistered.Builder setEthAddress(java.lang.String value) {
      validate(fields()[1], value);
      this.ethAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ethAddress' field has been set.
      * @return True if the 'ethAddress' field has been set, false otherwise.
      */
    public boolean hasEthAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ethAddress' field.
      * @return This builder.
      */
    public io.raidenmap.event.AddressRegistered.Builder clearEthAddress() {
      ethAddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'endpointAddress' field.
      * @return The value.
      */
    public java.lang.String getEndpointAddress() {
      return endpointAddress;
    }

    /**
      * Sets the value of the 'endpointAddress' field.
      * @param value The value of 'endpointAddress'.
      * @return This builder.
      */
    public io.raidenmap.event.AddressRegistered.Builder setEndpointAddress(java.lang.String value) {
      validate(fields()[2], value);
      this.endpointAddress = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'endpointAddress' field has been set.
      * @return True if the 'endpointAddress' field has been set, false otherwise.
      */
    public boolean hasEndpointAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'endpointAddress' field.
      * @return This builder.
      */
    public io.raidenmap.event.AddressRegistered.Builder clearEndpointAddress() {
      endpointAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AddressRegistered build() {
      try {
        AddressRegistered record = new AddressRegistered();
        if (metadataBuilder != null) {
          record.metadata = this.metadataBuilder.build();
        } else {
          record.metadata = fieldSetFlags()[0] ? this.metadata : (io.raidenmap.event.Metadata) defaultValue(fields()[0]);
        }
        record.ethAddress = fieldSetFlags()[1] ? this.ethAddress : (java.lang.String) defaultValue(fields()[1]);
        record.endpointAddress = fieldSetFlags()[2] ? this.endpointAddress : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AddressRegistered>
    WRITER$ = (org.apache.avro.io.DatumWriter<AddressRegistered>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AddressRegistered>
    READER$ = (org.apache.avro.io.DatumReader<AddressRegistered>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
